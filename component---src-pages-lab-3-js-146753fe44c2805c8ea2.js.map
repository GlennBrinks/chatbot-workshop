{"version":3,"sources":["webpack:///./src/pages/lab-3.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/navigation-link.js","webpack:///./src/components/navigation.js","webpack:///./src/components/layout.js","webpack:///./src/images/show-recommendations.png"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_images_show_recommendations_png__WEBPACK_IMPORTED_MODULE_4__","_images_show_recommendations_png__WEBPACK_IMPORTED_MODULE_4___default","Lab3","a","createElement","className","style","textAlign","src","showRecommendations","alt","title","width","color","fontWeight","href","id","placement","target","rel","margin","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","react_default","background","maxWidth","padding","gatsby_browser_entry","textDecoration","NavigationLink","exact","activeClassName","getProps","isCurrent","isPartiallyCurrent","join","trim","bool","node","defaultProps","Navigation","marginBottom","reactstrap_es","pills","Layout","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header","navigation","paddingTop","_755544856","p"],"mappings":"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","file":"component---src-pages-lab-3-js-146753fe44c2805c8ea2.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { Alert, UncontrolledTooltip } from 'reactstrap'\n\nimport Layout from '../components/layout'\n\nimport showRecommendations from '../images/show-recommendations.png'\n\nconst Lab3 = () => (\n  <Layout>\n    <h2>Lab 3: Working with Entities</h2>\n    <p>\n      Watson leverages intents we define to let us know what the user query is\n      about. What does the user want? In the previous lab, we created a few\n      chitchat intents, as well as <code>#hours_info</code> and{' '}\n      <code>#location_info</code>. If the user greets us, thanks us, wants to\n      leave the conversation, ask us about hours of operation, or location\n      information, we'll know which <em>intent</em> they had.\n    </p>\n    <p>\n      The next step is to gather specific bits of information given in the\n      question, if any are provided. For that, we'll need <em>entities</em>.\n    </p>\n\n    <h3>What you will accomplish</h3>\n    <p>In this lab you will:</p>\n    <ol>\n      <li>Create, modify, and delete entities;</li>\n      <li>\n        Test entities in the <span className=\"instruction\">Try it out</span>{' '}\n        panel;\n      </li>\n      <li>Try out system entities;</li>\n      <li>Import and export entities via CSV files;</li>\n      <li>Learn about synonyms and patterns.</li>\n    </ol>\n\n    <h3>Task 1: Create, modify, and delete entities</h3>\n    <p>\n      Entities recognize and capture specific pieces of information in the user\n      input. In our flower shop chain chatbot, people asking us about store\n      hours and locations might provide a specific location.\n    </p>\n    <p>\n      In our fictitious Flower Shop Chain we have stores in Auckland,\n      Wellington, Sydney, Melbourne, and Brisbane. So a user might ask,{' '}\n      <code>Where is your Wellington store?</code>. We shouldn't ignore that\n      extra bit of information, so that we can take it into account when we\n      formulate a response.\n    </p>\n    <p>\n      We can start by creating a <code>@location</code> entity for those cities.\n    </p>\n    <ol>\n      <li>\n        <strong>\n          In your skill, click on{' '}\n          <span className=\"instruction\">Entities</span>\n        </strong>{' '}\n        to enter the entities section.\n      </li>\n      <li>\n        Here,{' '}\n        <strong>\n          click the <span className=\"instruction\">Add entity</span> button\n        </strong>\n        . Choose <code>@location</code> as the entity name. Leave{' '}\n        <span className=\"instruction\">Fuzzy Matching</span> enabled so that we\n        can still detect the city name even if the user misspells it. Finally,{' '}\n        <strong>\n          click the <span className=\"instruction\">Create entity</span> button\n        </strong>\n        .\n      </li>\n      <li>\n        You'll be prompted to enter entity values, and possible synonyms.{' '}\n        <p>\n          <strong>\n            Enter\n            <code>Auckland</code> and click{' '}\n            <span className=\"instruction\">Add Value</span>\n          </strong>\n          .\n        </p>\n        <p>\n          Generally speaking you won't need a synonym for cities, but you might\n          include some if the city has common nicknames, if people refer to your\n          store location by its street or neighbourhood in the city, and so on.\n          Small towns can also act as synonyms. After all, if people are asking\n          about your store in a nearby town, they might be happy with an answer\n          for the nearest city.\n        </p>\n        <p>\n          Essentially, a synonym is not necessarly the dictionary definition of\n          synonym. Though those are good candidates for synonyms as well, when\n          the context makes sense. For example, we could have an entity called{' '}\n          <code>@relationship</code> and the entity value{' '}\n          <code>@relationship:mother</code> with <code>mom</code> as a synonym\n          for that value. When the user enters a question including the word{' '}\n          <code>mom</code>, Watson will detect <code>@relationship:mother</code>{' '}\n          (the entity value for that synonym).\n        </p>\n      </li>\n      <li>\n        <strong>Repeat the process</strong> for <code>Wellington</code>,{' '}\n        <code>Sydney</code>, <code>Melbourne</code>, and <code>Brisbane</code>.\n      </li>\n      <li>\n        At any time you can click on an entity value to edit its name or\n        synonym. Entities values are allowed to have spaces in them. When you\n        first create an entity value, you're given the option to click on the{' '}\n        <span className=\"instruction\">Show recommendations</span> button to\n        select some synonyms from a list provided by Watson.{' '}\n        <strong>Try out this feature.</strong> If you want to leverage it for an\n        existing entity value, click on the small Watson icon next to it, as\n        shown in the picture below.\n        <p style={{ textAlign: 'center' }}>\n          <img\n            src={showRecommendations}\n            alt=\"Synonym recommendations offered by Watson\"\n            title=\"Synonym recommendations offered by Watson\"\n            width=\"700\"\n          />\n        </p>\n      </li>\n      <li>\n        Use the <span className=\"instruction\">Try it out</span> panel to{' '}\n        <strong>test out these entity values</strong>. Try entering,{' '}\n        <code>What are your hours of operation in Auckland</code> and see how\n        Watson classifies that user question.\n      </li>\n      <li>\n        <p>\n          Awesome. We can now recognize the cities corresponding to our stores.\n          But what happens when the user enters{' '}\n          <code>hours for Christchurch</code> or <code>hours for Perth</code>{' '}\n          where we don't have a store? <strong>Try it and see</strong>.\n        </p>\n        <p>\n          You'll notice that since we don't have a entity value for Christchurch\n          or Perth, neither will be picked up as an entity value. This is not\n          necessarly a problem, because we can structure our chatbot to provide\n          a generic, informative response if no recognized location is\n          indicated.\n        </p>\n      </li>\n      <li>\n        <strong>\n          Practice creating a new entity of your choice with some values, and\n          then deleting it.\n        </strong>{' '}\n        The process is very similar to that of intents. Inside of{' '}\n        <span className=\"instruction\">Entities</span>, you would select the\n        checkmark next to the entity you want to delete, and then click the{' '}\n        <span className=\"instruction\">Delete</span> button that appears. (Don't\n        delete <code>@location</code> though.)\n      </li>\n    </ol>\n\n    <h3>Task 2: Try out system entities</h3>\n    <p>\n      System entities allow you to easily detect common specific pieces of\n      information like dates, times, numbers, currencies, etc. And among\n      these... locations. That's right. There is a <code>@sys-location</code>{' '}\n      entity that will detect locations for us. One that would handle any city\n      (or state, country, etc).\n    </p>\n    <p>\n      So in theory we don't even need our <code>@location</code> entity, we\n      could just use\n      <code>@sys-location</code>. However, there is one small caveat worth\n      discussing, as we'll see in a moment.\n    </p>\n    <ol>\n      <li>\n        <p>\n          To enable <code>@sys-location</code> click on{' '}\n          <span className=\"instruction\">System entities</span> in the{' '}\n          <span className=\"instruction\">Entities</span> section of your\n          skill.{' '}\n          <strong>\n            Turn on <code>@sys-location</code>\n          </strong>\n          . Take a moment to see what other system entities exist. If you open\n          the <span className=\"instruction\">Try it out</span> panel quickly\n          enough, you'll notice that Watson is now training on this large list\n          of built-in locations.\n        </p>\n      </li>\n      <li>\n        <p>\n          Wait for it to finish training and then{' '}\n          <strong>\n            try entering <code>hours for Sydney</code>\n          </strong>\n          . Which entity values are recognized?\n        </p>\n      </li>\n      <li>\n        <p>\n          You'll notice that both <code>@sys-location:Sydney</code> and{' '}\n          <code>@location:Sydney</code>\n          are detected. So far so good.{' '}\n          <strong>\n            Now try, <code>hours for sydnei</code>\n          </strong>{' '}\n          (note the typo). Which entities are detected? [\n          <span\n            style={{\n              color: 'blue',\n              fontWeight: 'bold',\n            }}\n            href=\"#\"\n            id=\"recall-input\"\n          >\n            Tip\n          </span>\n          ]\n          <UncontrolledTooltip placement=\"top\" target=\"recall-input\">\n            You can use your keyboard <kbd>UP</kbd> key to recall previous\n            inputs in the <span className=\"instruction\">Try it out</span> panel.\n          </UncontrolledTooltip>\n        </p>\n      </li>\n      <li>\n        <p>\n          Some of you will continue to see both entities being detected. Others, will see just your custom entity detected. Depending on the version of the system entities deployed in your skill (behind the scenes and outside your control), the system entity might expect an exact match for cities (including the correct capitalization). So on one hand, we get to detect other cities and locations (\n          <strong>\n            try <code>hours for Perth</code>\n          </strong>{' '}\n          again). On the other hand, the city has to be properly spelled (and\n          often capitalized) by the user if your version of system entities fails to detect mispelling.\n        </p>\n        <p>\n          Depending on your chatbot, one or the other is a bigger compromise. In\n          our case, our fictitious store has specific cities, so I think that\n          opting for our own version of <code>@location</code> makes sense. If\n          the chatbot needed to handle an arbitrary number of cities, then the{' '}\n          <code>@sys-location</code>\n          (warts and all) would be the best choice (unless we imported a large\n          collection of cities via CSV into our own <code>@location</code>{' '}\n          entity in that scenario, which is also an option).\n        </p>\n        <p>\n          Don't get me wrong. System entities are very handy and you should use\n          them to make your chatbot smarter, but I wanted to make\n          you aware of possible limitations in the current beta incarnation.\n        </p>\n      </li>\n      <li>\n        <p>\n          Now that you got the gist of how system entities work,{' '}\n          <strong>\n            go ahead and disable <code>@sys-location</code>\n          </strong>{' '}\n          from the <span className=\"instruction\">System entities</span> section,\n          as we'll simply use our own <code>@location</code> entity instead.\n        </p>\n      </li>\n    </ol>\n\n    <h3>Task 3: Import and export entities via CSV files</h3>\n    <p>\n      Importing and exporting entities via CSV files works very similarly to\n      intents. When you select one or more entities by checking off the\n      checkmarks next to them, you'll be offered the ability to export them to\n      CSV. Likewise, you can import them by clicking the{' '}\n      <span className=\"instruction\">Import entities</span> button next to{' '}\n      <span className=\"instruction\">Add entity</span>.\n    </p>\n    <p>\n      <strong>Click on the button below</strong> to open a CSV file with two new\n      entities I prepared (<code>@occasion</code> and <code>@relationship</code>\n      ), in a new tab of your browser.\n    </p>\n    <p style={{ textAlign: 'center' }}>\n      <a\n        className=\"btn btn-primary\"\n        href=\"https://raw.githubusercontent.com/acangiano/chatbot-workshop/master/src/csv/occasion-and-relationship-entities.csv\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Open CSV file\n      </a>\n    </p>\n    <p>\n      Save the file on your disk and then{' '}\n      <strong>proceed with importing the new entities</strong> by clicking on\n      the <span className=\"instruction\">Import entities</span> button in the{' '}\n      <span className=\"instruction\">Entities</span> section.\n    </p>\n    <p>\n      We'll use these two new entities later in the chatbot. For now, it will\n      serve as a good exercise to import entities.\n    </p>\n    <p>\n      The only real difference you need to be aware of, as far as importing\n      goes, lies in the structure of the CSV file. For intents, it was{' '}\n      <code>example,intent</code>. Entities can optionally have synonyms and\n      patterns as well, so the structure is different.\n    </p>\n    <p>\n      If you open the CSV file I provided you with (or simply click the button\n      above again), you'll notice that each line has the entity name first,\n      followed by a value, followed by a comma separated list of synonyms if any\n      have been provided for that row/entity value. If a pattern is specified\n      instead, it will also appear here.\n    </p>\n    <p>\n      A pattern is an advanced feature that allows you to detect an entity value\n      based not on a specific string (e.g., its synonym) but rather on a\n      specific pattern like a properly formatted phone number, email address, or\n      website address. If you are a programmer, it's worth noting that you\n      specify your pattern as a Regular Expressions (e.g.,{' '}\n      <code>04\\d&#123;2&#125;\\s\\d&#123;3&#125;\\s\\d&#123;3&#125;</code> to detect\n      that the number provided is an Australian mobile phone number). If you are\n      not a programmer, you can safely ignore this advanced feature. 😊\n    </p>\n    <Alert color=\"success\">\n      Now that you know how to work with intents and entities, we can move on to\n      the third component that make up chatbots. Namely, the dialog.\n    </Alert>\n    <p style={{ textAlign: 'center', margin: '20px' }}>\n      <Link className=\"btn btn-secondary\" to=\"/lab-2\">\n        Back to Lab 2\n      </Link>{' '}\n      <Link className=\"btn btn-primary\" to=\"/lab-4\">\n        Proceed to Lab 4\n      </Link>\n    </p>\n  </Layout>\n)\n\nexport default Lab3\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","// Adapted from th0th's suggestion to workaround Gatsby's bug\n// around active links that require a manual click first:\n// https://github.com/gatsbyjs/gatsby/issues/3238#issuecomment-413314187\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link as GatsbyLink,\n} from 'gatsby';\n\nexport default function NavigationLink(props) {\n  const {\n    exact,\n    className,\n    activeClassName,\n    children,\n  } = props;\n\n  return (\n    <GatsbyLink\n      {...props}\n      getProps={({ isCurrent, isPartiallyCurrent }) => ({\n         className: [\n          'nav-link',\n          className,\n          (exact && isCurrent) ? activeClassName : '',\n          (!exact && isPartiallyCurrent) ? activeClassName : '',\n        ].join(' ').trim(),\n      })}\n    >\n      {children}\n    </GatsbyLink>\n  );\n}\n\nNavigationLink.propTypes = {\n  exact: PropTypes.bool,\n  className: PropTypes.string,\n  activeClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nNavigationLink.defaultProps = {\n  exact: false,\n  activeClassName: 'current',\n  className: '',\n};","import React from 'react'\nimport { Nav, NavItem } from 'reactstrap'\n\nimport NavigationLink from './navigation-link'\n\nconst Navigation = () => (\n  <div\n    style={{\n      background: '#E5CCFF',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n      }}\n    >\n      <Nav pills>\n        <NavItem>\n          <NavigationLink to=\"/\" exact={true}>\n            Home\n          </NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-1\">Lab 1</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-2\">Lab 2</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-3\">Lab 3</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-4\">Lab 4</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-5\">Lab 5</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-6\">Lab 6</NavigationLink>\n        </NavItem>\n      </Nav>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'A collection of hands-on labs to build chatbots with IBM Watson Assistant.' },\n            { name: 'keywords', content: 'chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Navigation />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/show-recommendations-01871115fd9a3f581bd70b1807ddd261.png\";"],"sourceRoot":""}