{"version":3,"sources":["webpack:///./src/pages/lab-2.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/navigation-link.js","webpack:///./src/components/navigation.js","webpack:///./src/components/layout.js","webpack:///./src/images/how-to-build-a-chatbot.png"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_2__","reactstrap__WEBPACK_IMPORTED_MODULE_3__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","a","createElement","className","style","color","fontWeight","href","id","placement","target","textAlign","margin","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","object","string","isRequired","func","m","module","exports","default","ProdPageRenderer","_ref","location","pageResources","_loader__WEBPACK_IMPORTED_MODULE_4__","getResourcesForPathnameSync","pathname","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_3__","Object","assign","key","json","prop_types__WEBPACK_IMPORTED_MODULE_2___default","shape","header","siteTitle","react_default","background","maxWidth","padding","gatsby_browser_entry","textDecoration","NavigationLink","exact","activeClassName","getProps","isCurrent","isPartiallyCurrent","join","trim","prop_types_default","bool","node","defaultProps","navigation","marginBottom","reactstrap_es","pills","layout_Layout","Fragment","Helmet_default","title","site","siteMetadata","meta","name","content","lang","paddingTop","_755544856","p"],"mappings":"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","file":"component---src-pages-lab-2-js-beeec88683f35b974f1b.js","sourcesContent":["import React from 'react'\nimport courseImage from '../images/how-to-build-a-chatbot.png'\nimport { Link } from 'gatsby'\nimport { UncontrolledTooltip } from 'reactstrap'\n\nimport Layout from '../components/layout'\n\nconst Lab2 = () => (\n  <Layout>\n    <h2>Lab 2: Working with Intents</h2>\n    <p>\n      Great job on completing the first lab. We're now ready to tackle the first\n      and most important component of a chatbot, Intents.\n    </p>\n\n    <h3>What you will accomplish</h3>\n    <p>In this lab you will:</p>\n    <ol>\n      <li>Create a workspace for your chatbot;</li>\n      <li>Create, modify, and delete intents;</li>\n      <li>\n        Add intents from the{' '}\n        <span className=\"instruction\">Content Catalog</span>;\n      </li>\n      <li>Import and export intents via CSV files;</li>\n      <li>\n        Test intents in the <span className=\"instruction\">Try it</span> panel.\n      </li>\n    </ol>\n\n    <h3>Task 1: Create a workspace for your chatbot</h3>\n    <p>\n      This lab is all about intents, but in order to work with them, we'll need\n      to create a workspace which will contain said intents (along with entities\n      and the dialog).\n    </p>\n    <p>\n      Although it's possible to create elaborate chatbots that use multiple\n      workspaces, it is common to have just one workspace per chatbot. In other\n      words, for now you can simply{' '}\n      <strong>think of your workspace as your chatbot</strong>.\n    </p>\n    <ol>\n      <li>\n        From the <span className=\"instruction\">Workspaces</span> page of your\n        Watson Assistant instance [\n        <span\n          style={{\n            color: 'blue',\n            fontWeight: 'bold',\n          }}\n          href=\"#\"\n          id=\"no-bookmark\"\n        >\n          Tip\n        </span>\n        ]\n        <UncontrolledTooltip placement=\"top\" target=\"no-bookmark\">\n          If you didn't bookmark your{' '}\n          <span className=\"instruction\">Workspaces</span> page in the previous\n          lab, you can find your way back by visiting your dashboard and\n          clicking on the Watson Assistant service you created.\n        </UncontrolledTooltip>\n        ,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Create</span> button\n        </strong>{' '}\n        within the <span className=\"instruction\">Create a new workspace</span>{' '}\n        tile. [\n        <span\n          style={{\n            color: 'blue',\n            fontWeight: 'bold',\n          }}\n          href=\"#\"\n          id=\"ignore-customer-service\"\n        >\n          Note\n        </span>\n        ]\n        <UncontrolledTooltip placement=\"top\" target=\"ignore-customer-service\">\n          You'll also see a Customer Service sample that you can create by\n          clicking <span className=\"instruction\">Edit sample</span>. Ignore it\n          for now, as we'll take a look at it later in the labs.\n        </UncontrolledTooltip>\n      </li>\n      <li>\n        You'll be offered to enter a <span className=\"instruction\">Name</span>{' '}\n        and an optional <span className=\"instruction\">Description</span>. Enter{' '}\n        <code>Flower Shop Chatbot</code> or whatever you prefer for the name.\n        For the description, feel free to add{' '}\n        <code>A chatbot for a flower shop chain.</code> or something similar.\n      </li>\n      <li>\n        We'll create the chatbot in English, but{' '}\n        <strong>which other languages are also supported?</strong> Find out from\n        this window.\n      </li>\n      <li>\n        Ensuring <span className=\"instruction\">English (U.S.)</span> is\n        selected,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Create</span> button\n        </strong>{' '}\n        to generate the empty workspace for your chatbot.\n      </li>\n      <li>\n        Practice going back and forth between{' '}\n        <span className=\"instruction\">Workspaces</span> and the workspace you\n        just created (e.g., <code>Flower Shop Chatbot</code>\n        ).\n      </li>\n    </ol>\n\n    <h3>Task 2: Create, modify, and delete intents</h3>\n\n    <p>\n      Upon creation of the workspace, you'll find yourself on the{' '}\n      <span className=\"instruction\">Intents</span> section of your workspace.\n      Here you can add intents in several ways. In this task, we'll focus on the\n      most straightfoward way. That is, manually adding intents.\n    </p>\n\n    <ol>\n      <li>\n        <strong>\n          Click on the <span className=\"instruction\">Add intent</span> button.\n        </strong>\n      </li>\n      <li>\n        What happens if you try to call the intent <code>#greeting us</code>{' '}\n        with a space in the name?\n      </li>\n      <li>\n        <strong>\n          Define a <code>#greetings</code> intent\n        </strong>\n        . Optionally add an appropriate description as well, and then{' '}\n        <strong>\n          click <span className=\"instruction\">Create intent</span>\n        </strong>\n        .\n      </li>\n      <li>\n        You'll be prompted to create some examples to train Watson on the\n        concept of greetings. Try examples such as <code>hello</code>,\n        <code>hi</code>, <code>hey</code>, <code>good morning</code>,\n        <code>good afternoon</code>, and so on. You don't need to go crazy,\n        especially on such a simple intent, but you should always{' '}\n        <strong>include at least 5 examples</strong>. Ideally, more.\n      </li>\n    </ol>\n\n    <h3>Task 3: Add intents from the Content Catalog</h3>\n\n    <h3>Task 4: Import intents from a CSV file</h3>\n\n    <h3>Task 5: Test intents in the Try it panel</h3>\n\n    <blockquote>\n      Having completed this lab, you're well on your way to becoming a buddying\n      chatbot builder. Intents really are the most fundamental part of a\n      chatbot. If you add the right intents to your chatbot, everything else\n      will just fall into place easily.\n    </blockquote>\n    <p style={{ textAlign: 'center', margin: '20px' }}>\n      <Link className=\"btn btn-secondary\" to=\"/lab-1\">\n        Back to Lab 1\n      </Link>{' '}\n      <Link className=\"btn btn-primary\" to=\"/lab-3\">\n        Proceed to Lab 3\n      </Link>\n    </p>\n  </Layout>\n)\n\nexport default Lab2\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    key: location.pathname,\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","// Adapted from th0th's suggestion to workaround Gatsby's bug\n// around active links that require a manual click first:\n// https://github.com/gatsbyjs/gatsby/issues/3238#issuecomment-413314187\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link as GatsbyLink,\n} from 'gatsby';\n\nexport default function NavigationLink(props) {\n  const {\n    exact,\n    className,\n    activeClassName,\n    children,\n  } = props;\n\n  return (\n    <GatsbyLink\n      {...props}\n      getProps={({ isCurrent, isPartiallyCurrent }) => ({\n         className: [\n          'nav-link',\n          className,\n          (exact && isCurrent) ? activeClassName : '',\n          (!exact && isPartiallyCurrent) ? activeClassName : '',\n        ].join(' ').trim(),\n      })}\n    >\n      {children}\n    </GatsbyLink>\n  );\n}\n\nNavigationLink.propTypes = {\n  exact: PropTypes.bool,\n  className: PropTypes.string,\n  activeClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nNavigationLink.defaultProps = {\n  exact: false,\n  activeClassName: 'current',\n  className: '',\n};","import React from 'react'\nimport { Nav, NavItem } from 'reactstrap'\n\nimport NavigationLink from './navigation-link'\n\nconst Navigation = () => (\n  <div\n    style={{\n      background: '#E5CCFF',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n      }}\n    >\n      <Nav pills>\n        <NavItem>\n          <NavigationLink to=\"/\" exact={true}>\n            Home\n          </NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-1\">Lab 1</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-2\">Lab 2</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-3\">Lab 3</NavigationLink>\n        </NavItem>\n      </Nav>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'A collection of hands-on labs to build chatbots with IBM Watson Assistant.' },\n            { name: 'keywords', content: 'chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Navigation />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/how-to-build-a-chatbot-03721ea7f5dfaf409d361ddfd4fd3e23.png\";"],"sourceRoot":""}