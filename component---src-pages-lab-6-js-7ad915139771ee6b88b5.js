(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{144:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),l=a(147),r=a(154),s=a(153),i=a(196),c=a.n(i),u=a(197),h=a.n(u),m=a(198),d=a.n(m),p=a(199),f=a.n(p),w=a(200),E=a.n(w),g=a(201),y=a.n(g),b=a(202),v=a.n(b),k=a(203),x=a.n(k),N=a(204),T=a.n(N),q=a(205),I=a.n(q),C=a(206),W=a.n(C),S=a(207),A=a.n(S),$=a(208),L=a.n($);t.default=function(){return o.a.createElement(s.a,null,o.a.createElement("h2",null,"Lab 6: Let's improve it"),o.a.createElement("p",null,"By now you know the essentials of chatbot building. There are however some more advanced concepts that will enable you to create better and smarter chatbots."),o.a.createElement("p",null,"I could list them all here at once, but I think it makes more sense to organically introduce them in this lab as their need arises in the process of improving our chatbot."),o.a.createElement("p",null,"Keep in mind that some of these concepts are tougher to get, particularly if you have no prior programming experience. So don't be discouraged if you don't fully get everything right away."),o.a.createElement("p",null,"You can try things, test to see if they work, and if they don't, try something else. That's why the"," ",o.a.createElement("span",{className:"instruction"},"Try it out")," panel is so useful. It allows you to build chatbots one feature at the time. Stick with it, and if you practice, you'll quickly become familiar with the advanced concepts."),o.a.createElement("h3",null,"What you will accomplish"),o.a.createElement("p",null,"In this lab you will:"),o.a.createElement("ol",null,o.a.createElement("li",null,"Learn about several features of Watson Assistant;"),o.a.createElement("li",null,"Improve the chatbot we've built so far;"),o.a.createElement("li",null,"Complete the quizzes and exam for the online course.")),o.a.createElement("h3",null,"Task 1: Remember the city with context variables"),o.a.createElement("p",null,"Whenever a user enters a new input, the intent and entities that are detected don't stick around for the rest of the conversation. They exist at the moment, for the current input, and are forgotten as the user types more questions."),o.a.createElement("p",null,"This is generally fine, but it limits the chatbot ability to appear smarter and remembering the context of the conversation so far. For example, consider the following interaction:"),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:c.a,alt:"No memory of the previous interaction is shown here",title:"No memory of the previous interaction is shown here",width:"700"})),o.a.createElement("p",null,"A human customer agent responding to the second question would have inferred that the user is asking about the hours of operation for the city they just enquired about in the previous question (i.e., Sydney). However, the entity detected in the first input only lives for the duration of that input, so our chatbot has no memory of it when the user enters a second question."),o.a.createElement("p",null,"How can we store this information so it's available for the duration of the conversation? Enter the concept of context variables, which allows us to do just that. As we go about collecting information from the user, we can store them in the ",o.a.createElement("span",{className:"instruction"},"Context")," and then reuse it when it makes sense."),o.a.createElement("p",null,"One way to achieve this is to create a passtrhough node that checks for the ",o.a.createElement("code",null,"@location")," entity and sets it to ",o.a.createElement("code",null,"$city")," if one is detected. It then hands off the execution to the rest of the nodes as if this node didn't exist."),o.a.createElement("p",null,"Let's see how this would work in practice."),o.a.createElement("ol",null,o.a.createElement("li",null,"In the ",o.a.createElement("span",{className:"instruction"},"Dialog")," section of your workspace, select the ",o.a.createElement("span",{className:"instruction"},"Welcome")," node and then"," ",o.a.createElement("strong",null,"click ",o.a.createElement("span",{className:"instruction"},"Add node"))," ","to create a sibiling node underneath (as a reminder, all nodes must be contained between the ",o.a.createElement("span",{className:"instruction"},"Welcome")," and the ",o.a.createElement("span",{className:"instruction"},"Anything else")," node)."),o.a.createElement("li",null,"Call the node ",o.a.createElement("code",null,"Assign City")," or something similar."," ",o.a.createElement("strong",null,"Set the condition to ",o.a.createElement("code",null,"@location"),".")," ","Delete the response as we don't want this node to issue the response, only to set the variable in the context."),o.a.createElement("li",null,"Next click on the three dots to the right of"," ",o.a.createElement("span",{className:"instruction"},"Then respond with:")," and"," ",o.a.createElement("strong",null,"select ",o.a.createElement("span",{className:"instruction"},"Open context editor")),"."),o.a.createElement("li",null,o.a.createElement("p",null,"You'll be offered the ability to set one or more context variables whenever this node is executed."," ",o.a.createElement("strong",null,"Enter ",o.a.createElement("code",null,"$city")," for the variable name, and"," ",o.a.createElement("code",null,"@location")," for the value.")),o.a.createElement("p",null,"In the ",o.a.createElement("span",{className:"instruction"},"And finally")," section we don't want to wait for the user input (they already gave us an input to process) we just want to jump to the rest of the nodes as if nothing happened. To do so"," ",o.a.createElement("strong",null,"select ",o.a.createElement("span",{className:"instruction"},"Jump to..."))," ","from the drop down list. You'll be asked to specify which node to jump to. ",o.a.createElement("strong",null,"Select the first node just below the current one")," ","(i.e., ",o.a.createElement("span",{className:"instruction"},"Hours of Operation"),"). You'll then be asked to specify what to do after the jump. Wait for the user input? No. Jumping to the response directly? No."," ",o.a.createElement("strong",null,"What we want is"," ",o.a.createElement("span",{className:"instruction"},"If bot recognizes (condition)"))," ","so that this node can be evaluated as it normally would."),o.a.createElement("p",null,"To recap, our node detects if there is a ",o.a.createElement("code",null,"@location")," ","specified in the input. If there is we execute the node which does nothing but set the context variable ",o.a.createElement("code",null,"$city")," to the entity value (e.g., ",o.a.createElement("code",null,"Sydney"),"). Then we jump to evaluating the condition of the first node beneath us so that the flow is the same as if this context variable assigning node wasn't there. If that node's condition is successful it will be executed. If not, the nodes beneath will be evaluated in their order of appearance. If none of the nodes satisfy the current input, we hit the fallback ",o.a.createElement("span",{className:"instruction"},"Anything else")," node as usual."),o.a.createElement("p",null,"Your ",o.a.createElement("span",{className:"instruction"},"Assign City")," node should look like shown in the image below."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:h.a,alt:"The city detection node",title:"The city detection node",width:"700"}))),o.a.createElement("li",null,o.a.createElement("p",null,"Head over to the ",o.a.createElement("span",{className:"instruction"},"Try it out")," panel and"," ",o.a.createElement("strong",null,"ask ",o.a.createElement("code",null,"What are your hours of operation?")),". Click on ",o.a.createElement("span",{className:"instruction"},"Manage Context")," at the top of the panel to see the content of the"," ",o.a.createElement("span",{className:"instruction"},"Context")," (i.e., its variables)."),o.a.createElement("p",null,"The ",o.a.createElement("code",null,"$timezone")," variable will already be set for you automatically, but because we didn't specify a location, the"," ",o.a.createElement("span",{className:"instruction"},"Assign City")," node was not executed, and therefore no ",o.a.createElement("code",null,"$city")," context variable was set.")),o.a.createElement("li",null,"Close the context and now"," ",o.a.createElement("strong",null,"try entering ",o.a.createElement("code",null,"What are your hours of operation in Sydney?"))," ","in input. Next, click on"," ",o.a.createElement("span",{className:"instruction"},"Manage Context")," again. You'll notice that this time the ",o.a.createElement("code",null,"$city")," context variable has been set to the entity value (i.e., the string ",o.a.createElement("code",null,'"Sydney"'),"). We'll have access to this variable for the entire duration of the conversation with the user (or until we set its value to something else). It's worth noting that pressing"," ",o.a.createElement("span",{className:"instruction"},"Clear")," in the panel starts a new conversation, and so context variables are cleared as well. Go head and close the context manager again."),o.a.createElement("li",null,"We want to make sure that ",o.a.createElement("code",null,"$city")," variable is set whether it was specified along with a request for hours information (as we already did) or for location addresses. So as a sanity check,"," ",o.a.createElement("strong",null,"try ",o.a.createElement("code",null,"where is your Brisbane store?")),". You should see that the city in the context now changes to the string"," ",o.a.createElement("code",null,'"Brisbane"'),"."),o.a.createElement("li",null,o.a.createElement("p",null,"Alright, we now store city in our trusty ",o.a.createElement("code",null,"$city")," context variable. So we should change our"," ",o.a.createElement("span",{className:"instruction"},"Location Provided")," child nodes to make use of it."),o.a.createElement("p",null,"There is an easy way to do this. Simply"," ",o.a.createElement("strong",null,"replace ",o.a.createElement("code",null,"@location")," with ",o.a.createElement("code",null,"$city")," for every occurence")," ","in the two",o.a.createElement("span",{className:"instruction"},"Location Provided")," child nodes as shown in the image below."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:f.a,alt:"Leveraging the $city context variable in the node",title:"Leveraging the $city context variable in the node",width:"700"})),o.a.createElement("p",null,o.a.createElement("strong",null,"Make sure you repeat this process for both"," ",o.a.createElement("span",{className:"instruction"},"Location Provided")," child nodes."))),o.a.createElement("li",null,o.a.createElement("p",null,"Next, test the original interaction again."," ",o.a.createElement("strong",null,"Enter, ",o.a.createElement("code",null,"where is your Sydney store?")," followed by"," ",o.a.createElement("code",null,"What are the hours of operation?"),".")," ","You should now see a smarter response as shown in the image below!"),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:d.a,alt:"The improved chatbot interaction",title:"The improved chatbot interaction",width:"700"}))),o.a.createElement("li",null,o.a.createElement("p",null,"But wait... now that we have the ",o.a.createElement("code",null,"$city")," variables, can we use it to help our business even further? It would be a nice touch to tell the user we hope they'll visit our store when they wave us goodbye."),o.a.createElement("p",null,"Simply"," ",o.a.createElement("strong",null,"change the ",o.a.createElement("span",{className:"instruction"},"Goodbyes")," node responses to include the ",o.a.createElement("code",null,"$city")," variable.")," ","If it's set to a specific city, it will shown. If it's not set, it will not be displayed. So go ahead and change the first response for that node to"," ",o.a.createElement("code",null,"Nice talking to you today. We hope you visit our $city store.")," ","If the city is set to, say, Sydney, the response to the user will be"," ",o.a.createElement("em",null,"Nice talking to you today. We hope you visit our Sydney store.")," ","If no city is set, simply"," ",o.a.createElement("em",null,"Nice talking to you today. We hope you visit our store.")," A small, but still nice touch that invites our customers to shop with us."),o.a.createElement("p",null,"Go head and"," ",o.a.createElement("strong",null,"test that it works in the"," ",o.a.createElement("span",{className:"instruction"},"Try it out")," panel"),". Remember to use the ",o.a.createElement("span",{className:"instruction"},"Clear")," link at the top to clear your variables whenever you are running a new test."),o.a.createElement("p",null,"Context variables are quite useful, as I hope this small example allowed to illustrate."))),o.a.createElement("h3",null,"Task 2: Collect the user name with <? input.text ?>"),o.a.createElement("p",null,"Sometimes you'll see chatbots asking for the user name, so as to make the interaction more personable. We know that we'd want to store it in a context variable once we acquire it, so that we can refer to it throughout the conversation to sound more friendly. However, how would we go about collecting the name?"),o.a.createElement("ol",null,o.a.createElement("li",null,"Since we are dealing with names,"," ",o.a.createElement("strong",null,"let's start by enabling the ",o.a.createElement("code",null,"@sys-person")," entity")," ","from the ",o.a.createElement("span",{className:"instruction"},"System entities")," section. Watson will start training (as expected)."),o.a.createElement("li",null,"Back in the ",o.a.createElement("span",{className:"instruction"},"Dialog"),", select the"," ",o.a.createElement("span",{className:"instruction"},"Welcome")," node. We need to change the prompt so that it asks for a name."," ",o.a.createElement("strong",null,"Enter,"," ",o.a.createElement("code",null,"Hello. My name is Florence and I'm a chatbot. What name can I call you by?"))),o.a.createElement("li",null,o.a.createElement("strong",null,"We need a child node to actually collect the name")," (the answer to our question, in other words). So go ahead and create a child node under ",o.a.createElement("span",{className:"instruction"},"Welcome"),". Call it"," ",o.a.createElement("code",null,"Collect Name"),". For the condition we want to detect that a"," ",o.a.createElement("code",null,"@sys-person")," name was provided."),o.a.createElement("li",null,"Click on the three dots icon in the response section and open the context editor."," ",o.a.createElement("strong",null,"Set the context variable ",o.a.createElement("code",null,"$name")," to the value"," ",o.a.createElement("code",null,"@sys-person"),".")),o.a.createElement("li",null,"Next, we want to reply to the user from this node, so"," ",o.a.createElement("strong",null,"add the following response,"," ",o.a.createElement("code",null,"Nice to meet you $name. How can I help you? You can ask me about our store hours and locations."))),o.a.createElement("li",null,o.a.createElement("p",null,"Use the ",o.a.createElement("span",{className:"instruction"},"Try it out")," panel to"," ",o.a.createElement("strong",null,"test out the interaction"),", as shown below. (Click"," ",o.a.createElement("span",{className:"instruction"},"Clear")," to start a brand new conversation.)"),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:E.a,alt:"Testing out the name collection",title:"Testing out the name collection",width:"700"})),o.a.createElement("p",null,"Nice! We are all set, right? Well, not so fast. You might have spotted the problem with your own name. We live in a beautiful and diverse world, and people have a variety of names. If you try it with the name, ",o.a.createElement("code",null,"Reyansh")," it won't detect it. Heck, if you try"," ",o.a.createElement("code",null,"antonio")," with a lowercase ",o.a.createElement("em",null,"a")," it won't detect the name (I fully believe this latter limitation will be lifted in the future, but the former is much harder to address)."),o.a.createElement("p",null,"So we have something that sort of works, provided the name is common enough and properly capitalized. If that's not the case, the experience we provide is... poor at best, ending up with"," ",o.a.createElement("em",null,"I don't understand.")," type of responses to the user's own name (the sweetest sound to their ears)."),o.a.createElement("p",null,"We have a couple of possible approaches. Both valid. The first one is to forget about collecting the name. We simply revert to the previous prompt, get rid of the child node, and that might be good enough for our chatbot."),o.a.createElement("p",null,"The second approach is to take what the user enters, verbatim. In other words, we are collecting whatever answer the user provides and storing it exactly as stated. The only downside to this is that the user might say, ",o.a.createElement("em",null,"I don't want to tell you")," and we'll end up saying, ",o.a.createElement("em",null,"Nice to meet you I don't want to tell you.")," Which is amusing, but an argument could be made that the user asked for it. Technically, we could implement even more sophisticated logic to detect such responses (with an intent) and not store the name if we get a flippant reply from the user, but it might be a refinement for a much later version of our chatbot."),o.a.createElement("p",null,"At any rate, let's see how to collect the user's input exactly as provided. Select the ",o.a.createElement("span",{className:"instruction"},"Collect Name")," ","node and"," ",o.a.createElement("strong",null,"change the condition from ",o.a.createElement("code",null,"@sys-person")," to"," ",o.a.createElement("code",null,"true"))," ","as we want to always collect the name no matter what the user replies to the prompt for their name. Watson will store the current user input in ",o.a.createElement("code",null,"input.text"),". So"," ",o.a.createElement("strong",null,"change the value of the ",o.a.createElement("code",null,"$name")," context variable to"," ",o.a.createElement("code",null,"<? input.text ?>")),". The reason why we need the special syntax is because we don't want to say ",o.a.createElement("em",null,"Nice to meet you input.text.")," but rather we are asking Watson to give us the actual value."),o.a.createElement("p",null,"Doing so will collect the user input and assign it to the name. If you want to always capitalize the name, so that ",o.a.createElement("code",null,"antonio")," is stored as ",o.a.createElement("code",null,"Antonio"),", you can use a bit of code"," ",o.a.createElement("code",null,"<? input.text.substring(0, 1).toUpperCase() + input.text.substring(1) ?>")," ","that will tranform it for you. If you are not a programmer, don't worry too much if you don't understand the details. Simply know that it capitalizes the input text and you can copy and paste it whenever you have such a need.")),o.a.createElement("li",null,o.a.createElement("p",null,"Now that you collected the name,"," ",o.a.createElement("strong",null,"use ",o.a.createElement("code",null,"$name"),"in the reponses")," ","for ",o.a.createElement("span",{className:"instruction"},"Greetings"),","," ",o.a.createElement("span",{className:"instruction"},"Thank you"),", and"," ",o.a.createElement("span",{className:"instruction"},"Goodbyes")," responses (the last one of which is shown below)."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:y.a,alt:"Testing out the goodbye node",title:"Testing out the goodbye node",width:"700"})),o.a.createElement("p",null,"If you look at the interaction on the right, you'll notice that it comes across as quite personable."," ",o.a.createElement("strong",null,"Try it out yourself with your own name.")))),o.a.createElement("h3",null,"Task 3: Follow up questions and slots"),o.a.createElement("p",null,"What we just did, beside learning about"," ",o.a.createElement("code",null,"<? input.text ?>")," is handle a follow up question in a child node. This is a common pattern in which the chatbot asks for information or clarification from the user and then handles the answer in a child node."),o.a.createElement("p",null,"If multiple follow up questions that are dependent on each other have to be asked by the chatbot, you'll end up with a cascade of children nodes, each asking the next question in the chain and having their child process it. This works but it's not ideal in terms of reasoning about or structuring your chatbot dialog flow."),o.a.createElement("p",null,"Another shortcoming of this approach is that if the user asks a side question or just says, ",o.a.createElement("em",null,"wait a second"),', instead of replying to what we asked, we\'ll end up losing our "position" in the dialog cascade and therefore end up treating the delayed answer as a brand new input, failing (most likely) to provide an appropriate response or collect the information we wanted.'),o.a.createElement("p",null,"There is a much better tool to help us collect information from the user and store it in context variables. Namely, I'm talking about Slots."),o.a.createElement("p",null,"Let's see a practical example of how they work."),o.a.createElement("ol",null,o.a.createElement("li",null,o.a.createElement("strong",null,"Define an intent called ",o.a.createElement("code",null,"#flower_recommendations"))," ","with at least 5 examples of ways people might ask for flower suggestions (e.g, ",o.a.createElement("code",null,"Flower recommendations"),","," ",o.a.createElement("code",null,"What are the best flowers for Valentine's Day?"),", etc.)"),o.a.createElement("li",null,o.a.createElement("strong",null,"Create a node called"," ",o.a.createElement("span",{className:"instruction"},"Flower Recommendations"))," ","below the ",o.a.createElement("span",{className:"instruction"},"Welcome")," node (as a peer node, not a child)."," ",o.a.createElement("strong",null,"Set the condition to ",o.a.createElement("code",null,"#flower_recommendations"),".")," ","This is the node that will handle our flower recommendations."),o.a.createElement("li",null,"Click on the ",o.a.createElement("span",{className:"instruction"},"Customize")," link in the node and"," ",o.a.createElement("strong",null,"turn on the ",o.a.createElement("span",{className:"instruction"},"Slots")," feature"),". Leave ",o.a.createElement("span",{className:"instruction"},"Prompt for everything")," ","unchecked, as this option is only useful if you have multiple slots/questions for the user and you want to ask them all at once, rather than one at the time. Not a common scenario. Finally, click on the ",o.a.createElement("span",{className:"instruction"},"Apply")," button."),o.a.createElement("li",null,o.a.createElement("p",null,"This will automatically add one slot for you. We use slots to collect information from the user and store it in a context variable. A node can have multiple slots, if multiple pieces of information need to be collected. The three key components of a slot are"," ",o.a.createElement("span",{className:"instruction"},"Check for")," (typically an entity),"," ",o.a.createElement("span",{className:"instruction"},"Save it as")," (a context variable), and ",o.a.createElement("span",{className:"instruction"},"If not present, ask")," ","(optionally, the question to explicitly request the information if not provided)."," ",o.a.createElement("strong",null,"Enter ",o.a.createElement("code",null,"@occasion"),", ",o.a.createElement("code",null,"$occasion"),", and"," ",o.a.createElement("code",null,"For what occasion?")," respectively.")),o.a.createElement("p",null,"This node will be executed when its condition"," ",o.a.createElement("code",null,"#flower_recommendations")," is true. In other words, when the user is asking for flower suggestions. However we want to know for which occasion the flowers are meant, so as to have an appropriate response for different occasions. The slot will automatically assign"," ",o.a.createElement("code",null,"@occasion")," to the ",o.a.createElement("code",null,"$occasion")," context variable if the user provided an entity value in their original question (e.g.,"," ",o.a.createElement("em",null,"flowers suggestions for Valentine's Day"),") and not ask the question in that case. If the ",o.a.createElement("code",null,"@occasion")," entity is not detected, because the user simply asked,"," ",o.a.createElement("em",null,"I'd like some flower recommendations")," without specifiying a particular occasion, then the slot will ask"," ",o.a.createElement("em",null,"For what occasion?")," until the user replies with a relevant"," ",o.a.createElement("code",null,"@occasion"),". The slot is like a dog with a bone and will keep asking the question until the user enters an occasion. So if the user enters an irrelevant reply, the slot will ask the question again.")),o.a.createElement("li",null,"After the slot did its job of clarifying with the user which occasion are we talking about, it will store it in the ",o.a.createElement("code",null,"$occasion")," ","context variable. So we can use it directly in the response section for the same node, without the need to create a child node in most cases. We want to provide a different answer for each occasion, so you'll want to"," ",o.a.createElement("strong",null,"enable ",o.a.createElement("span",{className:"instruction"},"Multiple responses")," for the node")," ","from the ",o.a.createElement("span",{className:"instruction"},"Customize")," link as well."),o.a.createElement("li",null,o.a.createElement("p",null,"Now you can add different answers leveraging the content of the context variable ",o.a.createElement("code",null,"$occasion"),", as shown in the image below. Go ahead and ",o.a.createElement("strong",null,"replicate it in your own node"),", handling at least a few occasions from ",o.a.createElement("code",null,"@occasion"),". Don't worry about implementing them all or adding very meaningful flower recommendation responses."),o.a.createElement(r.a,{color:"danger"},"The slot sets the context variable ",o.a.createElement("code",null,"$occasion")," for you. Make sure you use ",o.a.createElement("code",null,"$occasion")," not ",o.a.createElement("code",null,"@occasion")," in your multiple responses."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:v.a,alt:"A node using a slot and multiple responses",title:"A node using a slot and multiple responses",width:"700"}))),o.a.createElement("li",null,o.a.createElement("p",null,"Once you've added a few, open the"," ",o.a.createElement("span",{className:"instruction"},"Try it out")," panel, press the"," ",o.a.createElement("span",{className:"instruction"},"Clear")," link, and"," ",o.a.createElement("strong",null,"test that this is actually working"),". For example, try:"),o.a.createElement("ul",{style:{listStyle:"none"}},o.a.createElement("li",null,"Enter your name to respond to the prompt"),o.a.createElement("li",null,o.a.createElement("code",null,"I'd like flower suggestions")),o.a.createElement("li",null,o.a.createElement("code",null,"mother's day"))))),o.a.createElement("p",null,"You should get the response you specified (provided you added one for the condition ",o.a.createElement("code",null,'$occasion == "Mother\'s Day"'),"). Note that we can normally use the ",o.a.createElement("code",null,":")," shorthand when working with entity values that have no spaces. So ",o.a.createElement("code",null,"$occasion:Birthday")," ","is equivalent to explictly saying ",o.a.createElement("code",null,'$occasion == "Birthday"')," ","which means"," ",o.a.createElement("em",null,"the entity value stored in ",o.a.createElement("code",null,"$occasion")," is"," ",o.a.createElement("code",null,"Birthday"),".")," ","However, if the entity value contains a space, as it's the case for",o.a.createElement("code",null,"@occasion:(Mother's Day)"),", you'll want to use the explicit form with the equal equal symbols."),o.a.createElement("p",null,"Using a slot saved us from having to implement the collection of the"," ",o.a.createElement("code",null,"$occasion")," somewhere (e.g., in a passthrough node like we did for ",o.a.createElement("span",{className:"instruction"},"Assign City"),"), handling everything in one node. With a required slot (so one for which you defined a question to collect information from the user), we can count on ",o.a.createElement("code",null,"$occasion")," existing as we formulate our response."),o.a.createElement("p",null,"Note that if you don't specify a question, the slot becomes optional, which means that the entity value will be stored in the context variable of your choice if detected in the user input, but the user won't be asked explicitly for it (since you didn't provide a question)."),o.a.createElement("p",null,"If you add two slots to a node, then the node will ask the first question, store the information in your first context variable, then proceed with asking the second question and storing that answer in the second context variable you specified."),o.a.createElement("p",null,"The classic example of multiple slots in a node is a chatbot that makes a restaurant reservation. Let's say that the information it needs to collect is the name, phone number, date and time, and party size. The node can define a slot for each of these values with their respective questions. This greatly simplifies the dialog flow, as it reduces what would require several nodes, to a single node that does all the work. It also ensures that the answers are collected before the conversation proceeds further which is crucial in a scenario where, say, you are making a reservation."),o.a.createElement("p",null,"To handle complex logic you can use both slots and children nodes. Slots to collect the info, children node to do the processing of that information according to your logic/preferences."),o.a.createElement("p",null,"And since slots collect the information in context variables, we can refer to their values throughout the conversation with the user. So in the example of the reservation, we might be able to provide a confirmation of the reservation as we wave the user goodbye."),o.a.createElement("p",null,o.a.createElement("strong",null,"Use slots to reimplement the hours of operation and location information logic"),", simplifying the design. Get rid of the"," ",o.a.createElement("span",{className:"instruction"},"Assign City")," node, and have a slot collecting the location inside of both"," ",o.a.createElement("span",{className:"instruction"},"Hours of Operation")," and"," ",o.a.createElement("span",{className:"instruction"},"Location Information"),". Make the slots required, that is, explicitly ask the user ",o.a.createElement("code",null,"For which city?")," if they didn't specify it in their original question, delete the children nodes, using instead multiple responses directly inside of"," ",o.a.createElement("span",{className:"instruction"},"Hours of Operation")," and"," ",o.a.createElement("span",{className:"instruction"},"Location Information"),"."),o.a.createElement("p",null,"This is what ",o.a.createElement("span",{className:"instruction"},"Hours of Operation")," needs to look like."," ",o.a.createElement("strong",null,"Ensure you make the changes for both"," ",o.a.createElement("span",{className:"instruction"},"Hours of Operation")," and"," ",o.a.createElement("span",{className:"instruction"},"Location Information"),".")),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:x.a,alt:"Hours of Operation using slots",title:"Hours of Operation using slots",width:"700"})),o.a.createElement("p",null,"And this is what a full interaction would look like."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:T.a,alt:"Testing the new Slot powered nodes",title:"Testing the new Slot powered nodes",width:"700"})),o.a.createElement("h3",null,"Task 4: Handling user digressions"),o.a.createElement("p",null,"Slots are awesome. However, their stubborn nature (for required slots that specify a question) can come across as rude if we are not careful. They keep the user to the task, which is fine if the user enters something irrelevant. It's less okay if the user is asking a legitimate side question, however."),o.a.createElement("p",null,"Consider the following interaction."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:I.a,alt:"Digressions need to be handled graciously or it will make the chatbot appear to be rude",title:"Digressions need to be handled graciously or it will make the chatbot appear to be rude",width:"700"})),o.a.createElement("p",null,"That's not great. It looks like we completely ignored the user's legitimate question. A first recourse we have is to use the Slot's"," ",o.a.createElement("span",{className:"instruction"},"Found")," and"," ",o.a.createElement("span",{className:"instruction"},"Not Found")," responses. These are issued to the user before the node's own responses (in our case the actual flower suggestions for the given occasion)."),o.a.createElement("ol",null,o.a.createElement("li",null,o.a.createElement("p",null,"Select the ",o.a.createElement("span",{className:"instruction"},"Flower Recommendations")," ","node and click on the gear icon next to our occasion slot."," ",o.a.createElement("strong",null,"Configure the slot by entering"," ",o.a.createElement("code",null,"Thank you for providing the occasion, $name.")," in the found response section and"," ",o.a.createElement("code",null,"Sorry, I have to ask again, $name, but in order to provide flower recommendations I need the information. What's the occasion again?")," ","in the not found section"),", as shown in the image below. Then click"," ",o.a.createElement("span",{className:"instruction"},"Save"),". (Variations are also possible to make the chatbot less repetitive.)"),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:W.a,alt:"Configuring our slot",title:"Configuring our slot",width:"700"})),o.a.createElement("p",null,"Now, when we try the interaction again, we get a slightly more friendly interaction."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:A.a,alt:"A less rude interaction",title:"A less rude interaction",width:"700"})),o.a.createElement("p",null,"That's better, maybe even good enough. We are apologizing when we have to ask again, and we are thanking the user when they provide the answer we need. But... we are still not answering the user's legitimate side question about hours of operation. What we need to do to is enable digressions.")),o.a.createElement("li",null,"The first thing we need to do is ensure that this slot allows digressions. We can do so by selecting the"," ",o.a.createElement("span",{className:"instruction"},"Flower Recommendations")," node again and clicking on ",o.a.createElement("span",{className:"instruction"},"Customize"),", then the"," ",o.a.createElement("span",{className:"instruction"},"Digression tab"),". Here you'll want to expand"," ",o.a.createElement("span",{className:"instruction"},"Digressions cannot go away from this node")," ","and"," ",o.a.createElement("strong",null,"turn on the option that allows digressions away from this node to happen"),". Make sure you click ",o.a.createElement("span",{className:"instruction"},"Apply"),"."),o.a.createElement("li",null,o.a.createElement("p",null,"With the digression enabled in our node, we'll now be able to ask other questions in the middle of answering the slot's question and get a proper response for them. However, we will not automatically return to the slot question once we received a response to the side question. This may or may not be what we want. If we'd like to return, we'll need to explictly"," ",o.a.createElement("strong",null,"set ",o.a.createElement("span",{className:"instruction"},"Return after digression"))," ","in the nodes we might digress to. Go ahead and set the option for both"," ",o.a.createElement("span",{className:"instruction"},"Hours of Operation")," and"," ",o.a.createElement("span",{className:"instruction"},"Location Information")," as shown below for the latter."),o.a.createElement("p",{style:{textAlign:"center"}},o.a.createElement("img",{src:L.a,alt:"Enabling digression returns from the Customize / Digressions section of a node",title:"Enabling digression returns from the Customize / Digressions section of a node",width:"700"}))),o.a.createElement("li",null,o.a.createElement("p",null,o.a.createElement("strong",null,"Try out the the following interaction in a brand new conversation.")),o.a.createElement("ul",{style:{listStyle:"none"}},o.a.createElement("li",null,"Your chatbot will prompt you to enter your name"),o.a.createElement("li",null,"Enter your actual name"),o.a.createElement("li",null,"Chatbot:"," ",o.a.createElement("em",null,"Nice to meet you YOUR NAME. How can I help you? You can ask me about our store hours and locations.")),o.a.createElement("li",null,"You: ",o.a.createElement("code",null,"I'd like some flower recommendations")),o.a.createElement("li",null,"Chatbot: ",o.a.createElement("em",null,"For what occasion?")),o.a.createElement("li",null,"You: ",o.a.createElement("code",null,"actually wait... what are your hours of operation?")),o.a.createElement("li",null,"Chatbot: ",o.a.createElement("em",null,"For which city?")),o.a.createElement("li",null,"You: ",o.a.createElement("code",null,"Auckland")),o.a.createElement("li",null,"Chatbot:"," ",o.a.createElement("em",null,"Our Auckland store is open Monday to Saturday from 9 am until 6 pm, except statutory holidays.")),o.a.createElement("li",null,"Chatbot: ",o.a.createElement("em",null,"For what occasion?"))))),o.a.createElement("p",null,"We might want to change that slot question to offer a bit more context, perhaps to ",o.a.createElement("code",null,"For what occasion are the flowers?")," but we are in good shape. We were able to answer the user digression and come back to our original slot to keep the user on task."),o.a.createElement("h3",null,"Task 5: Take the quizzes and final exam"),o.a.createElement("p",null,"Head over to the"," ",o.a.createElement("a",{href:"https://courses.cognitiveclass.ai/courses/course-v1:CognitiveClass+CB0103EN+v1/courseware/",target:"_blank",rel:"noopener noreferrer"},"Build Your Own Chatbot")," ","course and"," ",o.a.createElement("strong",null,"find the ",o.a.createElement("span",{className:"instruction"},"Graded Review Questions")," ","inside Module 4 and 5.")," ","Next, ",o.a.createElement("strong",null,"take the final exam")," to obtain your certificate and badge."),o.a.createElement("h3",null,"Task 6: (Homework) Create your own chatbot"),o.a.createElement("p",null,"At this point in time, you have all the skills required to create a useful chatbot that understands the user. Your take-home assignment is to create your own chatbot. Whether a personal chatbot, or something that can be useful for your company internally or externally."),o.a.createElement("p",null,"If you are truly out of ideas, consider the option of simply improving the chatbot we developed so far. There is lots of room for improvement and expansion (we haven't even used that ",o.a.createElement("code",null,"@relationship")," entity we imported). But you have the tools to do so, and that's what matters."),o.a.createElement("p",null,"Workspaces can be exported and imported as JSON file. You can download a version of the chatbot we built so far"," ",o.a.createElement("a",{href:"https://raw.githubusercontent.com/acangiano/chatbot-workshop/master/src/csv/workspace-with-slots.json",target:"_blank",rel:"noopener noreferrer"},"from here"),". If needed, feel free to import it in your"," ",o.a.createElement("span",{className:"instruction"},"Workspaces")," area as a starting point."),o.a.createElement("p",null,"I don't expect you to figure out everything right away, as this was a lot of material for one day. But you know where to look now, and can always refer back to this workshop material to refresh your memory. Not to mention, consulting the"," ",o.a.createElement("a",{href:"https://console.bluemix.net/docs/services/conversation/getting-started.html#gettingstarted"},"official documentation"),"."),o.a.createElement(r.a,{color:"success"},"You made it! I hope you enjoyed this workshop and if you have any questions, please do not hesitate to ask them. I wish you all the best. — Antonio (",o.a.createElement("a",{href:"https://twitter.com/acangiano"},"@acangiano"),")"),o.a.createElement("p",{style:{textAlign:"center",margin:"20px"}},o.a.createElement(l.Link,{className:"btn btn-secondary",to:"/lab-5"},"Back to Lab 5")))}},147:function(e,t,a){"use strict";a.r(t),a.d(t,"graphql",function(){return p}),a.d(t,"StaticQueryContext",function(){return m}),a.d(t,"StaticQuery",function(){return d});var n=a(0),o=a.n(n),l=a(4),r=a.n(l),s=a(146),i=a.n(s);a.d(t,"Link",function(){return i.a}),a.d(t,"withPrefix",function(){return s.withPrefix}),a.d(t,"navigate",function(){return s.navigate}),a.d(t,"push",function(){return s.push}),a.d(t,"replace",function(){return s.replace}),a.d(t,"navigateTo",function(){return s.navigateTo});var c=a(148),u=a.n(c);a.d(t,"PageRenderer",function(){return u.a});var h=a(34);a.d(t,"parsePath",function(){return h.a});var m=o.a.createContext({}),d=function(e){return o.a.createElement(m.Consumer,null,function(t){return e.data||t[e.query]&&t[e.query].data?(e.render||e.children)(e.data?e.data.data:t[e.query].data):o.a.createElement("div",null,"Loading (StaticQuery)")})};function p(){throw new Error("It appears like Gatsby is misconfigured. Gatsby related `graphql` calls are supposed to only be evaluated at compile time, and then compiled away,. Unfortunately, something went wrong and the query was left in the compiled code.\n\n.Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.")}d.propTypes={data:r.a.object,query:r.a.string.isRequired,render:r.a.func,children:r.a.func}},148:function(e,t,a){var n;e.exports=(n=a(150))&&n.default||n},149:function(e){e.exports={data:{site:{siteMetadata:{title:"Chatbot Workshop Hands-On Labs"}}}}},150:function(e,t,a){"use strict";a.r(t);a(33);var n=a(0),o=a.n(n),l=a(4),r=a.n(l),s=a(48),i=a(2),c=function(e){var t=e.location,a=i.default.getResourcesForPathnameSync(t.pathname);return o.a.createElement(s.a,Object.assign({location:t,pageResources:a},a.json))};c.propTypes={location:r.a.shape({pathname:r.a.string.isRequired}).isRequired},t.default=c},151:function(e,t,a){},153:function(e,t,a){"use strict";var n=a(149),o=a(0),l=a.n(o),r=a(4),s=a.n(r),i=a(155),c=a.n(i),u=a(147),h=function(e){var t=e.siteTitle;return l.a.createElement("div",{style:{background:"rebeccapurple"}},l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},l.a.createElement("h1",{style:{margin:0}},l.a.createElement(u.Link,{to:"/",style:{color:"white",textDecoration:"none"}},t))))},m=a(154);a(33),a(156);function d(e){var t=e.exact,a=e.className,n=e.activeClassName,o=e.children;return l.a.createElement(u.Link,Object.assign({},e,{getProps:function(e){var o=e.isCurrent,l=e.isPartiallyCurrent;return{className:["nav-link",a,t&&o?n:"",!t&&l?n:""].join(" ").trim()}}}),o)}d.propTypes={exact:s.a.bool,className:s.a.string,activeClassName:s.a.string,children:s.a.node.isRequired},d.defaultProps={exact:!1,activeClassName:"current",className:""};var p=function(){return l.a.createElement("div",{style:{background:"#E5CCFF",marginBottom:"1.45rem"}},l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960}},l.a.createElement(m.b,{pills:!0},l.a.createElement(m.c,null,l.a.createElement(d,{to:"/",exact:!0},"Home")),l.a.createElement(m.c,null,l.a.createElement(d,{to:"/lab-1"},"Lab 1")),l.a.createElement(m.c,null,l.a.createElement(d,{to:"/lab-2"},"Lab 2")),l.a.createElement(m.c,null,l.a.createElement(d,{to:"/lab-3"},"Lab 3")),l.a.createElement(m.c,null,l.a.createElement(d,{to:"/lab-4"},"Lab 4")),l.a.createElement(m.c,null,l.a.createElement(d,{to:"/lab-5"},"Lab 5")),l.a.createElement(m.c,null,l.a.createElement(d,{to:"/lab-6"},"Lab 6")))))},f=(a(151),a(157),function(e){var t=e.children;return l.a.createElement(u.StaticQuery,{query:"755544856",render:function(e){return l.a.createElement(l.a.Fragment,null,l.a.createElement(c.a,{title:e.site.siteMetadata.title,meta:[{name:"description",content:"A collection of hands-on labs to build chatbots with IBM Watson Assistant."},{name:"keywords",content:"chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop"}]},l.a.createElement("html",{lang:"en"})),l.a.createElement(h,{siteTitle:e.site.siteMetadata.title}),l.a.createElement(p,null),l.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0px 1.0875rem 1.45rem",paddingTop:0}},t))},data:n})});f.propTypes={children:s.a.node.isRequired};t.a=f},196:function(e,t,a){e.exports=a.p+"static/no-memory-48ce00ea6bd90533ac218d457ab25fc0.png"},197:function(e,t,a){e.exports=a.p+"static/city-detection-a0a32463053848b17f9bf7d4a66fb742.png"},198:function(e,t,a){e.exports=a.p+"static/with-memory-92dfe34fb2851e99d844ad12e3b12a94.png"},199:function(e,t,a){e.exports=a.p+"static/new-location-provided-2551cb2350a16f9c7d3b6ecdad0ef06e.png"},200:function(e,t,a){e.exports=a.p+"static/collect-name-edfd1a20d5fac4f7aff7c22f79e3d7c7.png"},201:function(e,t,a){e.exports=a.p+"static/goodbye-name-06e618584626986e7021184b0586b3e4.png"},202:function(e,t,a){e.exports=a.p+"static/sample-slot-b9e3b812bc64090492bc38e902c09574.png"},203:function(e,t,a){e.exports=a.p+"static/refactored-hours-db6a635b6a2a6e63a6b5e337a940c10b.png"},204:function(e,t,a){e.exports=a.p+"static/testing-slots-8ab7bf1bcd0681d2d93c0dad8f226782.png"},205:function(e,t,a){e.exports=a.p+"static/watson-rude-bb05373d8257dc9ba552c8f330d7f7d4.png"},206:function(e,t,a){e.exports=a.p+"static/configuring-slot-c5370e91d39c60e1937f3b3a55b3e915.png"},207:function(e,t,a){e.exports=a.p+"static/watson-less-rude-716486d467441c358a47be4f174da52f.png"},208:function(e,t,a){e.exports=a.p+"static/digression-return-9e23cee4c4788d77fd7bb619776d4fda.png"}}]);
//# sourceMappingURL=component---src-pages-lab-6-js-7ad915139771ee6b88b5.js.map