{"version":3,"sources":["webpack:///./src/pages/lab-4.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/navigation-link.js","webpack:///./src/components/navigation.js","webpack:///./src/components/layout.js","webpack:///./src/images/chitchat-nodes.png","webpack:///./src/images/simple-hours.png","webpack:///./src/images/hours-location-provided.png","webpack:///./src/images/hours-of-operation.png","webpack:///./src/images/location-provided-child-node.png","webpack:///./src/images/location-information.png"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_images_chitchat_nodes_png__WEBPACK_IMPORTED_MODULE_4__","_images_chitchat_nodes_png__WEBPACK_IMPORTED_MODULE_4___default","_images_simple_hours_png__WEBPACK_IMPORTED_MODULE_5__","_images_simple_hours_png__WEBPACK_IMPORTED_MODULE_5___default","_images_hours_location_provided_png__WEBPACK_IMPORTED_MODULE_6__","_images_hours_location_provided_png__WEBPACK_IMPORTED_MODULE_6___default","_images_hours_of_operation_png__WEBPACK_IMPORTED_MODULE_7__","_images_hours_of_operation_png__WEBPACK_IMPORTED_MODULE_7___default","_images_location_provided_child_node_png__WEBPACK_IMPORTED_MODULE_8__","_images_location_provided_child_node_png__WEBPACK_IMPORTED_MODULE_8___default","_images_location_information_png__WEBPACK_IMPORTED_MODULE_9__","_images_location_information_png__WEBPACK_IMPORTED_MODULE_9___default","Lab4","a","createElement","className","style","textAlign","src","chitchat","alt","title","width","simpleHours","hoursChildNode","hoursOfOperation","locationProvidedNode","locationInformation","listStyle","href","target","rel","color","margin","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","react_default","background","maxWidth","padding","gatsby_browser_entry","textDecoration","NavigationLink","exact","activeClassName","getProps","isCurrent","isPartiallyCurrent","join","trim","bool","node","defaultProps","Navigation","marginBottom","reactstrap_es","pills","Layout","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header","navigation","paddingTop","_755544856","p"],"mappings":"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","file":"component---src-pages-lab-4-js-ecc3c2544dbf28d10438.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { Alert, UncontrolledTooltip } from 'reactstrap'\n\nimport Layout from '../components/layout'\n\nimport chitchat from '../images/chitchat-nodes.png'\nimport simpleHours from '../images/simple-hours.png'\nimport hoursChildNode from '../images/hours-location-provided.png'\nimport hoursOfOperation from '../images/hours-of-operation.png'\nimport locationProvidedNode from '../images/location-provided-child-node.png'\nimport locationInformation from '../images/location-information.png'\n\nconst Lab4 = () => (\n  <Layout>\n    <h2>Lab 4: Defining the Dialog</h2>\n    <p>\n      With intents and entities under our belts, we can finally look at the\n      third component: the dialog.\n    </p>\n    <p>\n      In fact, at this point, our chatbot can understand some intents and detect\n      a few specific pieces of information thanks to entities. What we are\n      missing is using this information to formulate appropriate responses to\n      the user. Will do so in this lab to create a simple, but useful chatbot.\n    </p>\n    <h3>What you will accomplish</h3>\n    <p>In this lab you will:</p>\n    <ol>\n      <li>\n        Create a useful chatbot that leverages the intents and entities we\n        created so far;\n      </li>\n      <li>Understand how the Dialog flow and responses work;</li>\n      <li>Understand children nodes;</li>\n      <li>\n        Test our chatbot in the <span className=\"instruction\">Try it out</span>{' '}\n        panel;\n      </li>\n      <li>Take your third graded quiz.</li>\n    </ol>\n    <h3>Task 1: Create a Dialog and improve the prompt</h3>\n    <p>\n      Let's kick things off by creating a dialog and a good prompt for our\n      chatbot.\n    </p>\n    <ol>\n      <li>\n        <strong>\n          Click on the <span className=\"instruction\">Dialog</span> section\n        </strong>{' '}\n        of your workspace.\n      </li>\n      <li>\n        It's empty at the moment. Go ahead and{' '}\n        <strong>\n          click the <span className=\"instruction\">Create</span> button\n        </strong>\n        .\n      </li>\n      <li>\n        Take a moment to{' '}\n        <strong>\n          investigate the default <span className=\"instruction\">Welcome</span>{' '}\n          and <span className=\"instruction\">Anything else</span> nodes\n        </strong>{' '}\n        that were generated.\n      </li>\n      <li>\n        <strong>\n          Open the <span className=\"instruction\">Try it out</span> panel\n        </strong>{' '}\n        and click on the <span className=\"instruction\">Clear</span> link at the\n        top to start testing the chatbot from scratch. Notice anything different\n        this time around?\n      </li>\n      <li>\n        Yes, we have a prompt! Unfortunately, the default phrasing is not very\n        user friendly. <strong>Let's change it.</strong> Select the{' '}\n        <span className=\"instruction\">Welcome</span> node and edit the response\n        to say{' '}\n        <code>\n          Hello. My name is Florence and I'm a chatbot. How can I help you? You\n          can ask me about our store hours and locations.\n        </code>{' '}\n        Change the name from Florence, to whatever flower-inspired name you\n        prefer, to make it yours.\n      </li>\n      <li>\n        <p>\n          <strong>\n            Click on the <span className=\"instruction\">Clear</span> link\n          </strong>{' '}\n          in the <span className=\"instruction\">Try it out</span> panel once\n          again to see the change take effect.\n        </p>\n        <p>\n          Great. We added a bit of anthropomorphization, set the expectations\n          right by coming clean about our robotic nature, and offered some\n          guidance to the user in terms of the scope offered by our chatbot.\n        </p>\n      </li>\n      <li>\n        Now{' '}\n        <strong>\n          try replying <code>hello</code>\n        </strong>{' '}\n        in the <span className=\"instruction\">Try it out</span> panel. What\n        happens? Watson recognized the right intent but doesn't have a node to\n        handle greetings, so the fallback node{' '}\n        <span className=\"instruction\">Anything else</span> was executed. We'll\n        remedy to this in the next task.\n      </li>\n    </ol>\n    <h3>Task 2: Add nodes for chitchat</h3>\n    <p>\n      We have three chitchat intents, <code>#greetings</code>,{' '}\n      <code>#thank_you</code>, and <code>#goodbyes</code>. We now need to have\n      nodes that specify what reponse we want to give the user, when such\n      intents are detected.\n    </p>\n    <p>\n      We have a couple of strategies possible here. We could create three nodes,\n      one for each of these intents. This is the most common and simple\n      approach. The other option would be to create a single node for chitchat\n      that uses multiple responses (essentially, conditional responses),\n      attaching a condition to each response.\n    </p>\n    <p>\n      I would recommend that you stick to the traditional way as it's more\n      flexible. It allows us to add more chitchat nodes down the line, as well\n      as making the chitchat logic more complex if needed.\n    </p>\n    <p>\n      We want to keep things organized, separating small talk from\n      domain-specific nodes. So we'll create a folder for chitchat, and we'll\n      create three nodes in it for now. The picture below shows the end result.\n    </p>\n    <p style={{ textAlign: 'center' }}>\n      <img\n        src={chitchat}\n        alt=\"Our chitchat nodes\"\n        title=\"Our chitchat nodes\"\n        width=\"900\"\n      />\n    </p>\n    <p>Follow these steps to add it to your chatbot:</p>\n    <ol>\n      <li>\n        Select the <span className=\"instruction\">Welcome</span> node and then{' '}\n        <strong>\n          click the <span className=\"instruction\">Add folder</span> button\n        </strong>\n        . This will create a folder underneat the selected node (i.e.,{' '}\n        <span className=\"instruction\">Welcome</span>\n        ).\n      </li>\n      <li>\n        <strong>\n          Name the folder <code>Chitchat</code>\n        </strong>\n        . You don't need to specify a condition for the folder, as the\n        conditions of the children nodes will suffice.\n      </li>\n      <li>\n        With the <span className=\"instruction\">Chitchat</span> folder selected,{' '}\n        <strong>\n          click the <span className=\"instruction\">Add child node</span> button\n        </strong>\n        . This will create an empty child node within the folder.\n      </li>\n      <li>\n        <strong>\n          Name this node <code>Greetings</code>\n        </strong>\n        . We want it to be executed when the <code>#greetings</code> intent is\n        detected, so under{' '}\n        <span className=\"instruction\">If bot recognizes:</span>{' '}\n        <strong>\n          enter the\n          <code>#greetings</code> intent\n        </strong>\n        . Autocomplete will help you find the intent (not that useful here, but\n        quite handy in complex chatbots with many intents.) It's worth noting\n        that you can make the condition of a node as complex or as simple as\n        you'd like. You can use <code>||</code> (or its alias <code>OR</code>)\n        and <code>&&</code> (or its alias <code>AND</code>) to make the\n        condition more complex. We don't want this in our specific chatbot, but\n        if you wanted to execute a node if the intent detected was either{' '}\n        <code>#greetings</code> or <code>#goodbyes</code> we could simply type{' '}\n        <code>#greetings OR #goodbyes</code> in the node condition.\n      </li>\n      <li>\n        <p>\n          <strong>Enter a few appropriate responses</strong>. The scenario we\n          are handling here is one in which we already greeted the user with our\n          prompt, and they replied with a greeting. So we should greet them back\n          without repeating the prompt verbatim.\n        </p>\n\n        <p>\n          <strong>Enter a few responses to offer some variation</strong> if we\n          get a greeting-happy user. Examples, could be{' '}\n          <code>Hi there. How can I help you?</code>,{' '}\n          <code>Hello. How may I assist you today?</code>,{' '}\n          <code>Hi. What can I help you with?</code>.\n        </p>\n\n        <p>\n          Normally, I would advise against open-ended questions such as how can\n          I help you, but since we already qualified the scope of the chatbot in\n          our prompt, we can get away with it here.\n        </p>\n      </li>\n      <li>\n        You can leave the response variations set to{' '}\n        <span className=\"instruction\">sequential</span> or set them to{' '}\n        <span className=\"instruction\">random</span> if you prefer. The third\n        option, <span className=\"instruction\">multiline</span> is not applicable\n        here, as it would provide a response over multiple lines using each\n        response you wrote as its own line, de facto asking the user what is\n        essentially, the same question three times at once. 😄\n      </li>\n      <li>\n        After this reponse to the user, we expect them to enter some more\n        questions, so you can also{' '}\n        <strong>\n          leave <span className=\"instruction\">Wait for user input</span>\n        </strong>{' '}\n        as the final action when executing this node, in the{' '}\n        <span className=\"instruction\">And finally</span> section at the bottom\n        of the node.\n      </li>\n      <li>\n        Open the <span className=\"instruction\">Try it out</span> panel (if you\n        closed it) and click the <span className=\"instruction\">Clear</span> link\n        to start a new conversation.{' '}\n        <strong>\n          Try to reply <code>hi</code> to the chatbot prompt\n        </strong>\n        . Congratulations, you just had your first conversation with our\n        chatbot. It's not a complex interaction, but it's a start.\n      </li>\n      <li>\n        You can close the panel as well as the{' '}\n        <span className=\"instruction\">Greetings</span> node (by pressing on the\n        big X next to <span className=\"instruction\">Customize</span> link within\n        the node).\n      </li>\n      <li>\n        <p>\n          With the <span className=\"instruction\">Greetings</span> node selected,{' '}\n          <strong>\n            click on the <span className=\"instruction\">Add node</span> button\n          </strong>\n          . This will create an empty peer node below{' '}\n          <span className=\"instruction\">Greetings</span>.\n        </p>\n        <p>\n          The order of these chitchat nodes is not that important because they\n          are all simple nodes with independent intents. However, order can\n          matter in more complex scenarios (as we'll see in a moment) and it\n          makes sense to place them in a logical manner that is roughly\n          equivalent to how a conversation would go. Greetings first, thank yous\n          in the middle, and goodbyes at the end.\n        </p>\n        <p>\n          Go ahead and make this node{' '}\n          <strong>\n            handle the <code>#thank_you</code> intent\n          </strong>\n          . For the responses, you'll likely want something like{' '}\n          <code>\n            You're welcome. Please let me know if you need anything else.\n          </code>\n          , <code>My pleasure.</code>,{' '}\n          <code>\n            No problem. Let me know if there is anything else I can help with.\n          </code>{' '}\n          You could get chicky, and say, <code>I aim to please. 😊</code>{' '}\n          depending on how much personality you'd like to inject in your\n          chatbot. BTW, yes, emojis are supported.\n        </p>\n      </li>\n      <li>\n        <strong>\n          Repeat the process for the <code>Goodbyes</code> node\n        </strong>{' '}\n        which will handle the <code>#goodbyes</code> intent. You can use\n        standard polite goodbye responses (like{' '}\n        <code>Nice talking to you today.</code>,<code>Have a nice day.</code>,{' '}\n        <code>Goodbye.</code>\n        etc.)\n      </li>\n      <li>\n        Start a new conversation in the{' '}\n        <span className=\"instruction\">Try it out</span> panel and{' '}\n        <strong>test all three intents</strong> to ensure you get an appropriate\n        response in each case.\n      </li>\n    </ol>\n    <h3>Task 3: Respond to hours of operation</h3>\n    <p>\n      Chitchat interactions are necessary to make our chatbot more pleasant and\n      human-like. However, what makes the chatbot actually useful is its ability\n      to answer domain specific questions. That is, business related questions.\n    </p>\n    <p>\n      We defined intents for people enquiring about hours of operation and\n      addresses of our fictional florist chain, and even created an entity to be\n      able to provide location-specific answers. However, much like the chitchat\n      intents, intents alone don't offer responses to customers. We'll need to\n      create nodes to handle these two business specific intents.\n    </p>\n    <h4>Create the parent node</h4>\n    <p>\n      We'll start by creating a node for hours of operation. Follow these steps:\n    </p>\n    <ol>\n      <li>\n        <strong>\n          Select the <span className=\"instruction\">Welcome</span> node\n        </strong>{' '}\n        and{' '}\n        <strong>\n          click on <span className=\"instruction\">Add node</span>\n        </strong>\n        . This will create an empty node just below the first node.\n      </li>\n      <li>\n        <strong>\n          Set the node name to <code>Hours of Operation</code>\n        </strong>{' '}\n        and{' '}\n        <strong>\n          use <code>#hours_info</code> for the condition\n        </strong>{' '}\n        of the node. This will ensure that the node will be executed when the\n        user is enquiring about shop hours.\n      </li>\n      <li>\n        <p>\n          <strong>\n            In the response, enter{' '}\n            <code>\n              Our hours of operations are listed on &lt;a\n              href=\"https://example.org/hours/\"&gt;this page&lt;/a&gt;.\n            </code>\n          </strong>\n          Next, head over to the <span className=\"instruction\">Try it out</span>{' '}\n          panel and test that it works by asking{' '}\n          <code>when is your Auckland store open?</code> as shown in the picture\n          below.\n        </p>\n        <p style={{ textAlign: 'center' }}>\n          <img\n            src={simpleHours}\n            alt=\"Testing our Hours of Operation node\"\n            title=\"Testing our Hours of Operation node\"\n            width=\"900\"\n          />\n        </p>\n      </li>\n    </ol>\n    <p>\n      This works and it provides a somewhat useful answer to the user (assuming\n      we are pointing them to a page with the right information listed).\n      However, it feels... not very smart.\n    </p>\n    <p>\n      After all, the user asked us about a specific location. We even detected\n      it with the <code>@location</code> entity. And then proceeded to ignore\n      it, opting instead for a generic answer. We can do better than that.\n      (Close the <span className=\"instruction\">Try it out</span> panel to gain\n      some breathing room as we work on the dialog.)\n    </p>\n    <p>\n      In order to handle this case properly, we'll have to consider two possible\n      scenarios. One in which a location is specified and one in which the user\n      just asks about hours of operation in general without indicating a city\n      (or at least a city in which we operate).\n    </p>\n    <p>\n      This is a classic use case for children nodes. We'll use our current node\n      to capture the hours of operation request, and then jump to the children\n      nodes to decide how to handle the request.\n    </p>\n    <h4>Create the Location Provided child node</h4>\n    <ol>\n      <li>\n        <strong>\n          Delete the response from our{' '}\n          <span className=\"instruction\">Hours of Operation</span> node\n        </strong>{' '}\n        by clicking on the trash bin icon in the{' '}\n        <span className=\"instruction\">Then respond with:</span> section. We do\n        that because we don't want this parent node to provide the answer. We'll\n        let the children nodes decide what's the right response.\n      </li>\n      <li>\n        With the <span className=\"instruction\">Hours of Operation</span> node\n        selected,{' '}\n        <strong>\n          click on <span className=\"instruction\">Add child node</span>\n        </strong>\n        . This creates the first child node. We'll use it for the case of the\n        user providing us a specific location. So go ahead and name it{' '}\n        <code>Location Provided</code>.\n      </li>\n      <li>\n        <strong>\n          Set the condition to <code>@location</code>\n        </strong>\n        , as we want to execute this node only if the user is enquiring about\n        hours of operation and a specific location was given. (A child node is\n        only executed if the parent node's condition is true or if a node\n        explicitly jumped to it. We'll see a jump example in Lab 6.)\n      </li>\n      <li>\n        We need a way to offer a different response for each city, so we need to\n        <strong>\n          enable <span className=\"instruction\">Multiple responses</span>\n        </strong>\n        . To do so, click on the <span className=\"instruction\">Customize</span>{' '}\n        link within our child node. Switch on{' '}\n        <span className=\"instruction\">Multiple responses</span> and click{' '}\n        <span className=\"instruction\">Apply</span>. You'll notice that now we\n        have the ability to set a condition before a response is issued.\n      </li>\n      <li>\n        <p>\n          Go ahead and{' '}\n          <strong>create a series of responses, one for each city</strong>. In\n          the <span className=\"instruction\">If bot recognizes</span> column\n          you'll want to enter the specific city (e.g.,{' '}\n          <code>@location:Auckland</code>) and in the response the hours of our\n          fictional flower shop location. (e.g.,{' '}\n          <code>\n            Our Auckland store is open Monday to Saturday from 9 am until 6 pm,\n            except statutory holidays.\n          </code>\n          ) Do the same for every other location we have (come up with fictional\n          hours of operation, it is after all a fictional chain). The end result\n          is shown in the image below.\n        </p>\n        <p style={{ textAlign: 'center' }}>\n          <img\n            src={hoursChildNode}\n            alt=\"Our child node to handle hours of operations specific to a location\"\n            title=\"Our child node to handle hours of operations specific to a location\"\n            width=\"900\"\n          />\n        </p>\n      </li>\n    </ol>\n    <p>\n      It's worth noting that if the hours of operations where the same for all\n      locations, we could have saved the trouble of switching to multiple\n      responses and simply included <code>@location</code> in our response.\n      (e.g.,{' '}\n      <code>\n        Our @location store is open Monday to Saturday from 9 am until 6 pm,\n        except statutory holidays.\n      </code>\n      ) This would automatically output the detected entity value back to the\n      user in the response. So when enquiring about Sydney, the user would\n      receive the response{' '}\n      <code>\n        Our Sydney store is open Monday to Saturday from 9 am until 6 pm, except\n        statutory holidays.\n      </code>{' '}\n      Of course, if stores have different hours of operation, we have no choice\n      but to opt for the mulitple response approach as we did here.\n    </p>\n    <h4>Create the No Location child node</h4>\n    <p>\n      We now have have a child node to handle users asking about hours of\n      operation for a specific location. However, we also need a child node to\n      handle the case in which the user didn't specify a location.\n    </p>\n    <ol>\n      <li>\n        With the <span className=\"instruction\">Location Provided</span> node\n        selected,{' '}\n        <strong>\n          click the <span className=\"instruction\">Add node</span> button\n        </strong>\n        to add a sibiling node below it.\n      </li>\n      <li>\n        <p>\n          <strong>\n            Call this node <code>No Location</code>.\n          </strong>{' '}\n          Set the condition to <code>true</code>. Here is why. When the user\n          asks <em>What are your hours of operation?</em> the{' '}\n          <code>#hours_info</code> intent is detected, so we enter the parent\n          node <span className=\"instruction\">Hours of Operation</span>. The{' '}\n          <span className=\"instruction\">Location Provided</span> child node is\n          then first evaluated. We fail its <code>@location</code> condition,\n          because the user didn't specify any location, so the next child node\n          is considered for execution. Since the condition is set to{' '}\n          <code>true</code> it will be executed. This is exactly what we want to\n          happen since at this point we know the user wants to know the hours of\n          operation but no location was provided. (If we left the condition\n          empty, we'd get an error because no children node was able to match\n          the user request.)\n        </p>\n        <p>\n          Note also that this is why the order of nodes can matter (it didn't\n          for chitchat nodes, but it does here). If we were to reverse the order\n          and place the <span className=\"instruction\">No Location</span> node\n          first, its <code>true</code> condition would always be satisfied and\n          the <span className=\"instruction\">Location Provided</span> node will\n          be overshadowed and never executed. We always want to place the most\n          specific condition at the top, with the more generic condition nodes\n          at the bottom as a catch all.\n        </p>\n      </li>\n      <li>\n        We need a generic answer for when no location is specified, so go ahead\n        and reuse the message we had originally.{' '}\n        <code>\n          Our hours of operations are listed on &lt;a\n          href=\"https://example.org/hours/\"&gt;this page&lt;/a&gt;.\n        </code>\n      </li>\n      <li>\n        Before we can test it all out, we need to make sure that the parent node\n        (i.e., <span className=\"instruction\">Hours of Operation</span>) hands\n        off control to the children nodes. Select the parent node, and you'll\n        notice that the <span className=\"instruction\">And finally</span> section\n        is set to <span className=\"instruction\">Wait for user input</span>. This\n        is not what we want. The user has already provided us with the question\n        and we haven't responded yet.{' '}\n        <strong>\n          Change this section of{' '}\n          <span className=\"instruction\">Hours of Operation</span> to{' '}\n          <span className=\"instruction\">Skip user input</span>.{' '}\n        </strong>{' '}\n        This will hand off the excution to the two children nodes we just\n        created.\n      </li>\n      <li>\n        If you click on the <span className=\"instruction\">Try it</span> button\n        and type, <code>What are your hours of operation for Melbourne?</code>{' '}\n        you should see a response specific to that city. If you try,\n        <code>What are your hours of operation?</code> you'll should get our\n        generic response with a link to the city hours, as shown in the image\n        below.\n      </li>\n    </ol>\n    <p style={{ textAlign: 'center' }}>\n      <img\n        src={hoursOfOperation}\n        alt=\"Testing our children nodes for Hours of Operation\"\n        title=\"Testing our children nodes for Hours of Operation\"\n        width=\"900\"\n      />\n    </p>\n    <h3>Task 4: Respond to location information</h3>\n    <p>\n      Our little chatbot is getting more useful by the minute. We now need to\n      handle location address requests. And guess what? It's no different in\n      terms of how this works. We'll have a parent node and two children to\n      distinguish when the location address request was specific to a city or\n      just a generic one.\n    </p>\n    <p>\n      Repetition is always useful to solidify one's understanding, so let's do\n      this step by step.\n    </p>\n    <ol>\n      <li>\n        Select the <span className=\"instruction\">Hours of Operation</span> node\n        and{' '}\n        <strong>\n          click on <span className=\"instruction\">Add node</span> to create a\n          sibiling node\n        </strong>{' '}\n        below it. Call this node <code>Location Information</code> (or whatever\n        you see fit) and set the condition to the <code>#location_info</code>{' '}\n        intent. Delete the text response as the children node we'll create will\n        handle the response.\n      </li>\n      <li>\n        With the <span className=\"instruction\">Location Information</span> node\n        selected, click <span className=\"instruction\">Add child node</span>.\n        <strong>\n          Call this first child node, <code>Location Provided</code> and set the\n          condition to <code>@location</code>\n        </strong>{' '}\n        as we want to respond only when the user provided a location. Click on\n        the <span className=\"instruction\">Customize</span> link and enable{' '}\n        <span className=\"instruction\">Multiple responses</span>.\n      </li>\n      <li>\n        <p>\n          <strong>Assign one response per city</strong>, providing a fictious\n          address for each (e.g.,{' '}\n          <code>Our Auckland store is located at 123 Queen St.</code>) as shown\n          in the picture below.\n        </p>\n        <p style={{ textAlign: 'center' }}>\n          <img\n            src={locationProvidedNode}\n            alt=\"Our child node to handle hours of operations specific to a location\"\n            title=\"Our child node to handle hours of operations specific to a location\"\n            width=\"900\"\n          />\n        </p>\n      </li>\n      <li>\n        With the <span className=\"instruction\">Location Provided</span> node\n        (under <span className=\"instruction\">Location Information</span>\n        ), selected, go ahead and{' '}\n        <strong>\n          click <span className=\"instruction\">Add node</span> to create a\n          sibiling beneath\n        </strong>\n        . (Depending on your resolution, you might have to scroll up to find the\n        button. Alternatively, you can click on the three dots icon of a node to\n        create nodes relative to the selected one.)\n      </li>\n      <li>\n        <strong>\n          Call it <code>No Location</code>, set the condition to{' '}\n          <code>true</code>\n        </strong>{' '}\n        and for the generic response enter something like:{' '}\n        <code>\n          Our store locations are listed on our site on the &lt;a\n          href=\"https://example.org/stores\"&gt;stores page&lt;/a&gt;.\n        </code>\n      </li>\n      <li>\n        <p>\n          As in the previous section, we must ensure that the parent node (i.e.,{' '}\n          <span className=\"instruction\">Location Information</span>) doesn't ask\n          for further input before we have even responded, but instead hands off\n          the execution to its children nodes. So select that parent node, and{' '}\n          <strong>\n            change the final actions to <code>Skip user input</code>.\n          </strong>\n        </p>\n        <p>\n          The final result will look remarkably similar to the previous\n          scenario, as shown below.\n        </p>\n        <p style={{ textAlign: 'center' }}>\n          <img\n            src={locationInformation}\n            alt=\"Our location information node structure\"\n            title=\"Our location information node structure\"\n            width=\"900\"\n          />\n        </p>\n      </li>\n      <li>\n        Open the <span className=\"instruction\">Try it out</span> panel, press{' '}\n        <span className=\"instruction\">Clear</span> to start a new conversation,\n        and <strong>test out a full conversation</strong> a user might have with\n        our chatbot. Enter in succession the following input.\n        <ol style={{ listStyle: 'none' }}>\n          <li>\n            <code>hello</code>\n          </li>\n          <li>\n            <code>where are you stores located?</code>\n          </li>\n          <li>\n            <code>what are your hours of operations in Auckland?</code>\n          </li>\n          <li>\n            <code>thank you</code>\n          </li>\n          <li>\n            <code>bye</code>\n          </li>\n        </ol>\n      </li>\n    </ol>\n    <p>\n      Pretty neat, eh? We can of course flesh out our chatbot much more, but if\n      you got to this point, you have mastered the fundamentals of what you need\n      to know to create something useful that cuts down of many common enquires\n      from your customers.\n    </p>\n    <p>\n      We'll soon see how to deploy the chatbot, and then tackle more advanced\n      topics in the process of improving the chatbot's usefuleness and apparent\n      degree of intelligence.\n    </p>\n    <h3>Task 5: Take the Module 3 Quiz</h3>\n    <p>\n      Head over to the{' '}\n      <a\n        href=\"https://courses.cognitiveclass.ai/courses/course-v1:CognitiveClass+CB0103EN+v1/courseware/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Build Your Own Chatbot\n      </a>{' '}\n      course and{' '}\n      <strong>\n        find the <span className=\"instruction\">Graded Review Questions</span>{' '}\n        inside Module 3.\n      </strong>\n    </p>\n    <p>\n      Note, that the course builds a similar flower shop chatbot as well, but\n      the course version is slightly different from the one we are developing in\n      this workshop. In order for you to successfully pass the quiz, please take\n      note of the following:\n    </p>\n    <ul>\n      <li>\n        That flower shop chatbot has chitchat intents (like ours) but also a{' '}\n        <code>#flower_suggestions</code> intent which is used to capture users\n        who ask for flower recommendations. (e.g.,{' '}\n        <em>I'd like to buy flowers</em>,{' '}\n        <em>What flowers should I buy for my sister?</em>)\n      </li>\n      <li>\n        The flower shop in the course has the same <code>@relationship</code>{' '}\n        entity like the one we imported in the previous lab. If you click on\n        that entity in our chatbot, you'll notice that it includes entity values\n        like <code>@relationship:husband</code>, <code>@relationship:wife</code>\n        , etc. The course chatbot uses them to detect the relationship of the\n        user with the flower receiver along with the intent for{' '}\n        <code>#flower_suggestions</code>.\n      </li>\n      <li>\n        You'll notice that some relationships have a syonym. For example,{' '}\n        <code>mom</code> is a synonym for the entity value{' '}\n        <code>@relationship:mother</code> and <code>dad</code> is a synonym for{' '}\n        <code>@relationship:father</code>.\n      </li>\n    </ul>\n    <p>\n      <strong>Take the quiz</strong>, just like you did in the previous module.\n      As a reminder, there are no trick questions, so go with the answer that\n      appears to make most sense to you.\n    </p>\n    <Alert color=\"success\">\n      We have a small, useful chatbot (if a basic one). In the next lab, we'll\n      deploy it to a WordPress site.\n    </Alert>\n    <p style={{ textAlign: 'center', margin: '20px' }}>\n      <Link className=\"btn btn-secondary\" to=\"/lab-3\">\n        Back to Lab 3\n      </Link>{' '}\n      <Link className=\"btn btn-primary\" to=\"/lab-5\">\n        Proceed to Lab 5\n      </Link>\n    </p>\n  </Layout>\n)\n\nexport default Lab4\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","// Adapted from th0th's suggestion to workaround Gatsby's bug\n// around active links that require a manual click first:\n// https://github.com/gatsbyjs/gatsby/issues/3238#issuecomment-413314187\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link as GatsbyLink,\n} from 'gatsby';\n\nexport default function NavigationLink(props) {\n  const {\n    exact,\n    className,\n    activeClassName,\n    children,\n  } = props;\n\n  return (\n    <GatsbyLink\n      {...props}\n      getProps={({ isCurrent, isPartiallyCurrent }) => ({\n         className: [\n          'nav-link',\n          className,\n          (exact && isCurrent) ? activeClassName : '',\n          (!exact && isPartiallyCurrent) ? activeClassName : '',\n        ].join(' ').trim(),\n      })}\n    >\n      {children}\n    </GatsbyLink>\n  );\n}\n\nNavigationLink.propTypes = {\n  exact: PropTypes.bool,\n  className: PropTypes.string,\n  activeClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nNavigationLink.defaultProps = {\n  exact: false,\n  activeClassName: 'current',\n  className: '',\n};","import React from 'react'\nimport { Nav, NavItem } from 'reactstrap'\n\nimport NavigationLink from './navigation-link'\n\nconst Navigation = () => (\n  <div\n    style={{\n      background: '#E5CCFF',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n      }}\n    >\n      <Nav pills>\n        <NavItem>\n          <NavigationLink to=\"/\" exact={true}>\n            Home\n          </NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-1\">Lab 1</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-2\">Lab 2</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-3\">Lab 3</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-4\">Lab 4</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-5\">Lab 5</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-6\">Lab 6</NavigationLink>\n        </NavItem>\n      </Nav>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'A collection of hands-on labs to build chatbots with IBM Watson Assistant.' },\n            { name: 'keywords', content: 'chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Navigation />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/chitchat-nodes-423587877cf895b31b90558a85a14c0c.png\";","module.exports = __webpack_public_path__ + \"static/simple-hours-ee7f59f29bcaf6bfce76e965f67e380c.png\";","module.exports = __webpack_public_path__ + \"static/hours-location-provided-798a093dd2be94e97adcfb5097472dd8.png\";","module.exports = __webpack_public_path__ + \"static/hours-of-operation-04db8041cefb0e8e6c92f43e775ce785.png\";","module.exports = __webpack_public_path__ + \"static/location-provided-child-node-b38ec3c380cad2a6c4701a872e9171cf.png\";","module.exports = __webpack_public_path__ + \"static/location-information-a71ecde6b5b916623031dc5dbb6582ed.png\";"],"sourceRoot":""}