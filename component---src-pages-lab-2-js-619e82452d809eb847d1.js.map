{"version":3,"sources":["webpack:///./src/pages/lab-2.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/navigation-link.js","webpack:///./src/components/navigation.js","webpack:///./src/components/layout.js","webpack:///./src/images/try-it-out-panel.png"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_images_try_it_out_panel_png__WEBPACK_IMPORTED_MODULE_4__","_images_try_it_out_panel_png__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","className","style","color","fontWeight","href","id","placement","target","textAlign","src","alt","margin","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","object","string","isRequired","func","m","module","exports","default","ProdPageRenderer","_ref","location","pageResources","_loader__WEBPACK_IMPORTED_MODULE_4__","getResourcesForPathnameSync","pathname","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_3__","Object","assign","key","json","prop_types__WEBPACK_IMPORTED_MODULE_2___default","shape","header","siteTitle","react_default","background","maxWidth","padding","gatsby_browser_entry","textDecoration","NavigationLink","exact","activeClassName","getProps","isCurrent","isPartiallyCurrent","join","trim","prop_types_default","bool","node","defaultProps","navigation","marginBottom","reactstrap_es","pills","layout_Layout","Fragment","Helmet_default","title","site","siteMetadata","meta","name","content","lang","paddingTop","_755544856","p"],"mappings":"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","file":"component---src-pages-lab-2-js-619e82452d809eb847d1.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { UncontrolledTooltip } from 'reactstrap'\nimport Layout from '../components/layout'\n\nimport tryItOut from '../images/try-it-out-panel.png'\n\nconst Lab2 = () => (\n  <Layout>\n    <h2>Lab 2: Working with Intents</h2>\n    <p>\n      Great job on completing the first lab. We're now ready to tackle the first\n      and most important component of a chatbot, Intents.\n    </p>\n\n    <h3>What you will accomplish</h3>\n    <p>In this lab you will:</p>\n    <ol>\n      <li>Create a workspace for your chatbot;</li>\n      <li>Create, modify, and delete intents;</li>\n      <li>\n        Add intents from the{' '}\n        <span className=\"instruction\">Content Catalog</span>;\n      </li>\n      <li>\n        Test intents in the <span className=\"instruction\">Try it</span> panel.\n      </li>\n      <li>Import and export intents via CSV files;</li>\n    </ol>\n\n    <h3>Task 1: Create a workspace for your chatbot</h3>\n    <p>\n      This lab is all about intents, but in order to work with them, we'll need\n      to create a workspace which will contain said intents (along with entities\n      and the dialog).\n    </p>\n    <p>\n      Although it's possible to create elaborate chatbots that use multiple\n      workspaces, it is common to have just one workspace per chatbot. In other\n      words, for now you can simply{' '}\n      <strong>think of your workspace as your chatbot</strong>.\n    </p>\n    <ol>\n      <li>\n        From the <span className=\"instruction\">Workspaces</span> page of your\n        Watson Assistant instance [\n        <span\n          style={{\n            color: 'blue',\n            fontWeight: 'bold',\n          }}\n          href=\"#\"\n          id=\"no-bookmark\"\n        >\n          Tip\n        </span>\n        ]\n        <UncontrolledTooltip placement=\"top\" target=\"no-bookmark\">\n          If you didn't bookmark your{' '}\n          <span className=\"instruction\">Workspaces</span> page in the previous\n          lab, you can find your way back by visiting your dashboard and\n          clicking on the Watson Assistant service you created.\n        </UncontrolledTooltip>\n        ,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Create</span> button\n        </strong>{' '}\n        within the <span className=\"instruction\">Create a new workspace</span>{' '}\n        tile. [\n        <span\n          style={{\n            color: 'blue',\n            fontWeight: 'bold',\n          }}\n          href=\"#\"\n          id=\"ignore-customer-service\"\n        >\n          Note\n        </span>\n        ]\n        <UncontrolledTooltip placement=\"top\" target=\"ignore-customer-service\">\n          You'll also see a Customer Service sample that you can create by\n          clicking <span className=\"instruction\">Edit sample</span>. Ignore it\n          for now, as we'll take a look at it later in the labs.\n        </UncontrolledTooltip>\n      </li>\n      <li>\n        You'll be offered to enter a <span className=\"instruction\">Name</span>{' '}\n        and an optional <span className=\"instruction\">Description</span>. Enter{' '}\n        <code>Flower Shop Chatbot</code> or whatever you prefer for the name.\n        For the description, feel free to add{' '}\n        <code>A chatbot for a flower shop chain.</code> or something similar.\n      </li>\n      <li>\n        We'll create the chatbot in English, but{' '}\n        <strong>which other languages are also supported?</strong> Find out from\n        this window.\n      </li>\n      <li>\n        Ensuring <span className=\"instruction\">English (U.S.)</span> is\n        selected,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Create</span> button\n        </strong>{' '}\n        to generate the empty workspace for your chatbot.\n      </li>\n      <li>\n        Practice going back and forth between{' '}\n        <span className=\"instruction\">Workspaces</span> and the workspace you\n        just created (e.g., <code>Flower Shop Chatbot</code>\n        ).\n      </li>\n    </ol>\n\n    <h3>Task 2: Create, train, and test intents</h3>\n\n    <p>\n      Upon creation of the workspace, you'll find yourself on the{' '}\n      <span className=\"instruction\">Intents</span> section of your workspace.\n      Here you can add intents in several ways. In this task, we'll focus on the\n      most common way. That is, manually adding intents.\n    </p>\n\n    <ol>\n      <li>\n        <strong>\n          Click on the <span className=\"instruction\">Add intent</span> button.\n        </strong>\n      </li>\n      <li>\n        What happens if you try to call the intent <code>#greeting us</code>{' '}\n        with a space in the name?\n      </li>\n      <li>\n        <strong>\n          Define a <code>#greetings</code> intent\n        </strong>\n        . Optionally add an appropriate description as well, and then{' '}\n        <strong>\n          click <span className=\"instruction\">Create intent</span>\n        </strong>\n        .\n      </li>\n      <li>\n        You'll be prompted to create some examples to train Watson on the\n        concept of greetings. Try examples such as <code>hello</code>,\n        <code>hi</code>, <code>hey</code>, <code>good morning</code>,\n        <code>good afternoon</code>, and so on. You don't need to go crazy,\n        especially on such a simple intent, but you should always{' '}\n        <strong>include at least 5 examples</strong>. Ideally, more. If you make\n        a typo in one or two of your examples, don't worry. Keep the typos, as\n        your users are likely to do the same mistakes, so this ends up training\n        Watson on a more realistic input set. When you are done, you can click\n        the back arrow icon at the top to go back to your list of intents.\n      </li>\n      <li>\n        Repeat the process to{' '}\n        <strong>\n          add <code>#thank_you</code> and <code>#goodbyes</code> intents\n        </strong>{' '}\n        with at least 5 appropriate examples each.\n      </li>\n    </ol>\n\n    <p>\n      At this point, you'll have the most basic chitchat intents a chatbot needs\n      to have. The more the merrier, of course, but this will do for now.\n    </p>\n\n    <p>\n      To test our intents, click on the Try it button in the top right. A chat\n      panel will appear where you can try user input and see how Watson analyses\n      to the input and responds. We haven't provided responses yet (we'll do so\n      in the Dialog lab) but we can still use it to test our intents. If you see\n      a Watson is training message, please wait for Watson to finish training on\n      your intent examples.\n    </p>\n    <p>\n      Go ahead and try some greetings, thank you, and goodbye messages. Feel\n      free to try both examples you provided and phrases that you haven't\n      provided in example.\n    </p>\n    <p>\n      If Watson miscategorized one example, feel free to click on the arrow (V)\n      next to the detected intent to assign a different intent. This will add\n      the example automatically for you, further training Watson. You'll see a\n      message indicating that the intent correction was submitted and that\n      Watson will use it to further training its machine learning model, as\n      shown in the figure below.\n    </p>\n    <p style={{ textAlign: 'center' }}>\n      <img src={tryItOut} alt=\"Manually assigning an intent to a test input\" />\n    </p>\n    <p>\n      If you do end up correcting some intents, you can click on that intent\n      name in the Intents section to verify that the example was indeed added\n      automatically for you. If you test the same utterance again, Watson will\n      correctly recognize the right intent this time.\n    </p>\n    <p>\n      In the Try it panel, what happens if you try a nonsensical input?\n      (Randomly smash on the keyboard if you have to. Personally, I produced the\n      beautiful, cat-walking-on-the-keyboard string dljkasdlsa dasldj alskdkas\n      ld.)\n    </p>\n    <p>\n      Watson will always try its hardest to match the input to an existing\n      intent, but if its confidence level in the best matching intent is very\n      low (below 20%), it will treat the input as Irrelevant to our set of\n      intents. In the dialog lab we'll find out how to handle when the use enter\n      a question that is irrelevant or outside the scope of our chatbot.\n    </p>\n    <p>\n      To conclude this task, click on an existing intent of your choice in\n      Intents, and add one more example to it. Then, select the checkmark next\n      to it, and you'll be given the option to delete it or even move it to a\n      different intent. In the future, for more complex intents, you'll be able\n      to add more examples that originate from your real customers'\n      conversations to better train Watson on your business domain intents.\n    </p>\n    <h3>Task 4: Add intents from the Content Catalog</h3>\n    <p>\n      IBM provides you with some ready-made intents that might be relevant to\n      the scope of your Chatbot. To see what's available, click on Content\n      Catalog within your workspace.\n    </p>\n    <p>\n      Select one category of your choice (e.g., Banking) and then click the Add\n      to workspace intent next to it. Switch back to the Intents section and you\n      should see a series of new intents relevant to common queries customers\n      may have for the category of your choice. This isn't quite a pre-made\n      chatbot but it's a nice starting point, that you can edit and adapt as\n      needed.\n    </p>\n    <p>\n      We are not going to use them for our Flower Shop Chatbot so click the\n      checkmarks next to them and press the Delete button to remove them. (Make\n      sure you keep the chitchat intents we created.) You'll notice how you were\n      also given the option to export them to a CSV file, which is quite useful\n      when reusing intents across different chatbots.\n    </p>\n\n    <p>\n      As you can see, it's very easy to create, modify, and delete intents,\n      whether they were manually created or imported from the Content Catalog.\n    </p>\n    <h3>Task 5: Import intents from a CSV file</h3>\n    <p>\n      There is another way to import intents, and that is from comma separated\n      files (i.e., CSV files). This format is particularly handy because it\n      allows you to easily export intent examples you might have in a\n      spreadsheet. Let's see how it works in practice.\n    </p>\n    <ol>\n      <li>\n        Download{' '}\n        <a href={'../csv/hours-and-locations-info.csv'}>this CSV file</a> I\n        prepared which includes intents for #hours_info and #location_info.\n      </li>\n      <li>b</li>\n      <li>c</li>\n      <li>d</li>\n      <li>e</li>\n      <li>f</li>\n    </ol>\n    <blockquote>\n      Having completed this lab, you're well on your way to becoming a buddying\n      chatbot builder. Intents really are the most fundamental part of a\n      chatbot. If you add the right intents to your chatbot, everything else\n      will just fall into place easily.\n    </blockquote>\n    <p style={{ textAlign: 'center', margin: '20px' }}>\n      <Link className=\"btn btn-secondary\" to=\"/lab-1\">\n        Back to Lab 1\n      </Link>{' '}\n      <Link className=\"btn btn-primary\" to=\"/lab-3\">\n        Proceed to Lab 3\n      </Link>\n    </p>\n  </Layout>\n)\n\nexport default Lab2\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    key: location.pathname,\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","// Adapted from th0th's suggestion to workaround Gatsby's bug\n// around active links that require a manual click first:\n// https://github.com/gatsbyjs/gatsby/issues/3238#issuecomment-413314187\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link as GatsbyLink,\n} from 'gatsby';\n\nexport default function NavigationLink(props) {\n  const {\n    exact,\n    className,\n    activeClassName,\n    children,\n  } = props;\n\n  return (\n    <GatsbyLink\n      {...props}\n      getProps={({ isCurrent, isPartiallyCurrent }) => ({\n         className: [\n          'nav-link',\n          className,\n          (exact && isCurrent) ? activeClassName : '',\n          (!exact && isPartiallyCurrent) ? activeClassName : '',\n        ].join(' ').trim(),\n      })}\n    >\n      {children}\n    </GatsbyLink>\n  );\n}\n\nNavigationLink.propTypes = {\n  exact: PropTypes.bool,\n  className: PropTypes.string,\n  activeClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nNavigationLink.defaultProps = {\n  exact: false,\n  activeClassName: 'current',\n  className: '',\n};","import React from 'react'\nimport { Nav, NavItem } from 'reactstrap'\n\nimport NavigationLink from './navigation-link'\n\nconst Navigation = () => (\n  <div\n    style={{\n      background: '#E5CCFF',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n      }}\n    >\n      <Nav pills>\n        <NavItem>\n          <NavigationLink to=\"/\" exact={true}>\n            Home\n          </NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-1\">Lab 1</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-2\">Lab 2</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-3\">Lab 3</NavigationLink>\n        </NavItem>\n      </Nav>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'A collection of hands-on labs to build chatbots with IBM Watson Assistant.' },\n            { name: 'keywords', content: 'chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Navigation />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/try-it-out-panel-51b4736e01a040f7063c34e695af2626.png\";"],"sourceRoot":""}