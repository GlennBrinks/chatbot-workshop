{"version":3,"sources":["webpack:///./src/pages/lab-2.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/navigation-link.js","webpack:///./src/components/navigation.js","webpack:///./src/components/layout.js","webpack:///./src/images/try-it-out-panel.png","webpack:///./src/images/successful-import-intents.png"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_images_try_it_out_panel_png__WEBPACK_IMPORTED_MODULE_4__","_images_try_it_out_panel_png__WEBPACK_IMPORTED_MODULE_4___default","_images_successful_import_intents_png__WEBPACK_IMPORTED_MODULE_5__","_images_successful_import_intents_png__WEBPACK_IMPORTED_MODULE_5___default","Lab2","a","createElement","className","style","color","fontWeight","href","id","placement","target","textAlign","src","tryItOut","alt","title","width","rel","successfulImport","margin","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","react_default","background","maxWidth","padding","gatsby_browser_entry","textDecoration","NavigationLink","exact","activeClassName","getProps","isCurrent","isPartiallyCurrent","join","trim","bool","node","defaultProps","Navigation","marginBottom","reactstrap_es","pills","Layout","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header","navigation","paddingTop","_755544856","p"],"mappings":"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","file":"component---src-pages-lab-2-js-a952976ef3df0e64fa46.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { Alert, UncontrolledTooltip } from 'reactstrap'\n\nimport Layout from '../components/layout'\n\nimport tryItOut from '../images/try-it-out-panel.png'\nimport successfulImport from '../images/successful-import-intents.png'\n\nconst Lab2 = () => (\n  <Layout>\n    <h2>Lab 2: Working with Intents</h2>\n    <p>\n      Great job on completing the first lab. We're now ready to tackle the first\n      and most important component of a chatbot, Intents.\n    </p>\n\n    <h3>What you will accomplish</h3>\n    <p>In this lab you will:</p>\n    <ol>\n      <li>Create a workspace for your chatbot;</li>\n      <li>Create, modify, and delete intents;</li>\n      <li>\n        Add intents from the{' '}\n        <span className=\"instruction\">Content Catalog</span>;\n      </li>\n      <li>\n        Test intents in the <span className=\"instruction\">Try it out</span>{' '}\n        panel.\n      </li>\n      <li>Import and export intents via CSV files;</li>\n    </ol>\n\n    <h3>Task 1: Create a workspace for your chatbot</h3>\n    <p>\n      This lab is all about intents, but in order to work with them, we'll need\n      to create a workspace which will contain said intents (along with entities\n      and the dialog).\n    </p>\n    <p>\n      Although it's possible to create elaborate chatbots that use multiple\n      workspaces, it is common to have just one workspace per chatbot. In other\n      words, for now you can simply{' '}\n      <strong>think of your workspace as your chatbot</strong>.\n    </p>\n    <ol>\n      <li>\n        From the <span className=\"instruction\">Workspaces</span> page of your\n        Watson Assistant instance [\n        <span\n          style={{\n            color: 'blue',\n            fontWeight: 'bold',\n          }}\n          href=\"#\"\n          id=\"no-bookmark\"\n        >\n          Tip\n        </span>\n        ]\n        <UncontrolledTooltip placement=\"top\" target=\"no-bookmark\">\n          If you didn't bookmark your{' '}\n          <span className=\"instruction\">Workspaces</span> page in the previous\n          lab, you can find your way back by visiting your dashboard and\n          clicking on the Watson Assistant service you created.\n        </UncontrolledTooltip>\n        ,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Create</span> button\n        </strong>{' '}\n        within the <span className=\"instruction\">Create a new workspace</span>{' '}\n        tile. [\n        <span\n          style={{\n            color: 'blue',\n            fontWeight: 'bold',\n          }}\n          href=\"#\"\n          id=\"ignore-customer-service\"\n        >\n          Note\n        </span>\n        ]\n        <UncontrolledTooltip placement=\"top\" target=\"ignore-customer-service\">\n          You'll also see a Customer Service sample that you can create by\n          clicking <span className=\"instruction\">Edit sample</span>. Ignore it\n          for now, as we'll take a look at it later in the labs.\n        </UncontrolledTooltip>\n      </li>\n      <li>\n        You'll be offered to enter a <span className=\"instruction\">Name</span>{' '}\n        and an optional <span className=\"instruction\">Description</span>. Enter{' '}\n        <code>Flower Shop Chatbot</code> or whatever you prefer for the name.\n        For the description, feel free to add{' '}\n        <code>A chatbot for a flower shop chain.</code> or something similar.\n      </li>\n      <li>\n        We'll create the chatbot in English, but{' '}\n        <strong>which other languages are also supported?</strong> Find out from\n        this window.\n      </li>\n      <li>\n        Ensuring <span className=\"instruction\">English (U.S.)</span> is\n        selected,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Create</span> button\n        </strong>{' '}\n        to generate the empty workspace for your chatbot.\n      </li>\n      <li>\n        Practice going back and forth between{' '}\n        <span className=\"instruction\">Workspaces</span> and the workspace you\n        just created (e.g., <code>Flower Shop Chatbot</code>\n        ).\n      </li>\n    </ol>\n\n    <h3>Task 2: Create, train, and test intents</h3>\n\n    <p>\n      Upon creation of the workspace, you'll find yourself on the{' '}\n      <span className=\"instruction\">Intents</span> section of your workspace.\n      Here you can add intents in several ways. In this task, we'll focus on the\n      most common way. That is, manually adding intents.\n    </p>\n\n    <ol>\n      <li>\n        <strong>\n          Click on the <span className=\"instruction\">Add intent</span> button.\n        </strong>\n      </li>\n      <li>\n        What happens if you try to call the intent <code>#greeting us</code>{' '}\n        with a space in the name?\n      </li>\n      <li>\n        <strong>\n          Define a <code>#greetings</code> intent\n        </strong>\n        . Optionally add an appropriate description as well, and then{' '}\n        <strong>\n          click <span className=\"instruction\">Create intent</span>\n        </strong>\n        .\n      </li>\n      <li>\n        You'll be prompted to create some examples to train Watson on the\n        concept of greetings. Try examples such as <code>hello</code>,\n        <code>hi</code>, <code>hey</code>, <code>good morning</code>,\n        <code>good afternoon</code>, and so on. You don't need to go crazy,\n        especially on such a simple intent, but you should always{' '}\n        <strong>include at least 5 examples</strong>. Ideally, more. If you make\n        a typo in one or two of your examples, don't worry. Keep the typos, as\n        your users are likely to do the same mistakes, so this ends up training\n        Watson on a more realistic input set. When you are done, you can click\n        the back arrow icon at the top to go back to your list of intents.\n      </li>\n      <li>\n        <p>\n          Repeat the process to{' '}\n          <strong>\n            add <code>#thank_you</code> and <code>#goodbyes</code> intents\n          </strong>{' '}\n          with at least 5 appropriate examples each.\n        </p>\n        <p>\n          At this point, you'll have the most basic chitchat intents a chatbot\n          needs to have. The more the merrier, of course, but this will do for\n          now.\n        </p>\n      </li>\n      <li>\n        To test our intents,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Try it</span> button\n        </strong>{' '}\n        in the top right. A chat panel will appear where you can try user input\n        and see how Watson analyses the user input and how our chatbot responds.\n        We haven't provided responses yet (we'll do so in the Dialog lab) but we\n        can still use it to test our intents. If you see a{' '}\n        <span className=\"instruction\">Watson is training</span> message, please\n        wait for Watson to finish training on your intent examples.\n      </li>\n      <li>\n        Go ahead and{' '}\n        <strong>try some greetings, thank you, and goodbye messages</strong> in\n        the panel. Feel free to try both examples you provided and expressions\n        that you haven't provided as examples.\n      </li>\n    </ol>\n    <p>\n      If Watson miscategorized one example, feel free to click on the arrow (V)\n      next to the detected intent to assign a different intent. This will add\n      your question as an example for the intent automatically for you, further\n      training Watson. (\n      <strong>\n        Try it with <code>Kia Ora</code>\n      </strong>\n      .)\n    </p>\n    <p>\n      You'll see a message indicating that the intent correction was submitted\n      and that Watson will use it to further training its Machine Learning\n      model, as shown in the figure below.\n    </p>\n    <p style={{ textAlign: 'center' }}>\n      <img\n        src={tryItOut}\n        alt=\"Manually assigning an intent to a test input\"\n        title=\"Manually assigning an intent to a test input\"\n        width=\"900\"\n      />\n    </p>\n    <p>\n      If you do end up correcting some intents, you can click on that intent\n      name in the Intents section to verify that the example was indeed added\n      automatically for you. If you test the same utterance again, Watson will\n      correctly recognize the right intent this time.\n    </p>\n    <p>\n      In the <span className=\"instruction\">Try it out</span> panel,{' '}\n      <strong>what happens if you try a nonsensical input?</strong> Randomly\n      smash on the keyboard if you have to. Personally, I produced the\n      beautiful, cat-walking-on-the-keyboard string{' '}\n      <code>dljkasdlsa dasldj alskdkas ld</code>. Create your own masterpiece.\n      😛\n    </p>\n    <p>\n      Watson will always try its hardest to match the user input to an existing\n      intent, even if it's not a perfect match. But if its confidence level in\n      the best matching intent is very low (below 20%), it will treat the input\n      as <span className=\"instruction\">Irrelevant</span>, as it is likely not\n      relevant to our set of intents.\n    </p>\n    <p>\n      In the lab about the Dialog, we'll find out how to handle when the user\n      enters a question that is irrelevant or outside the scope of our chatbot.\n    </p>\n    <p>\n      To conclude this task, click on an existing intent of your choice in{' '}\n      <span className=\"instruction\">Intents</span>, and{' '}\n      <strong>add one more example</strong> to it. Then, select the checkmark\n      next to it, and you'll be given the option to delete it (or even move it\n      to a different intent). Go ahead and <strong>delete that example</strong>{' '}\n      (not the whole intent!)\n    </p>\n    <p>\n      In the future, for more complex intents, you'll be able to add more\n      examples that originate from your real customers' conversations with your\n      virtual assistant (or your human customer care team), to better train\n      Watson on your business-specific intents.\n    </p>\n    <h3>Task 4: Add intents from the Content Catalog</h3>\n    <p>\n      IBM provides you with some ready-made intents that might be relevant to\n      the scope of your chatbot. To see what's available,{' '}\n      <strong>\n        click on <span className=\"instruction\">Content Catalog</span>\n      </strong>{' '}\n      within your workspace.\n    </p>\n    <p>\n      Select one category of your choice (e.g., Banking) and then{' '}\n      <strong>\n        click on the <span className=\"instruction\">Add to workspace</span>{' '}\n        button\n      </strong>{' '}\n      next to it. Switch back to the{' '}\n      <span className=\"instruction\">Intents</span> section and you should see a\n      series of new intents relevant to common queries customers may have for\n      the category of your choice. This isn't quite a pre-made chatbot but it's\n      a nice starting point, that you can edit and adapt as needed. Feel free to\n      try them out in the <span className=\"instruction\">Try it out</span> panel.\n    </p>\n    <p>\n      We are not going to use them for our Flower Shop Chatbot so click on the\n      checkmarks next to them and{' '}\n      <strong>\n        press the <span className=\"instruction\">Delete</span> button to remove\n        them\n      </strong>\n      . (Make sure you keep the chitchat intents we created.) You'll notice how\n      you were also given the option to export them to a CSV file, which is\n      quite useful when reusing intents across different chatbots. Go ahead and\n      <strong>export our chitchat intents</strong> to get some practice with\n      this feature.\n    </p>\n    <p>\n      As you can see, it's very easy to create, modify, and delete intents,\n      whether they were manually created or imported from the Content Catalog.\n    </p>\n    <h3>Task 5: Import intents from a CSV file</h3>\n    <p>\n      There is another way to import intents, and that is from comma separated\n      files (i.e., CSV files). This format is particularly handy because it\n      allows you to easily export intents (and their examples) stored in a\n      spreadsheet. Let's see how this works in practice.\n    </p>\n    <ol>\n      <li>\n        <p>\n          <strong>Click on the button below</strong> to open a CSV file I\n          prepared, in a new tab of your browser.\n        </p>\n        <p style={{ textAlign: 'center' }}>\n          <a\n            className=\"btn btn-primary\"\n            href=\"https://raw.githubusercontent.com/acangiano/chatbot-workshop/master/src/csv/hours-and-locations-intents.csv\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Open CSV file\n          </a>\n        </p>\n        <p>\n          As you can see its structure is very simple. Each line of the file has\n          an example, comma separated by the intent we want to assign to it.\n        </p>\n        <p>\n          In our Flower Shop Chatbot we want to allow people to enquire about\n          hours of operation and addresses of our flower shop stores, so this\n          file include examples for both <code>#hours_info</code> and{' '}\n          <code>#location_info</code>.\n        </p>\n        <p>\n          Note that the <code>#</code> prefix is not included in the CSV file.\n          It will be automatically added by Watson to the intents when importing\n          them.\n        </p>\n      </li>\n      <li>\n        <strong>Download the file</strong> by pressing <kbd>CRTL</kbd>+\n        <kbd>S</kbd> on Windows or{' '}\n        <bigger>\n          <kbd>&#8984;</kbd>\n        </bigger>\n        +<kbd>S</kbd> on Mac, or simply select the saving option offered by your\n        browser.\n      </li>\n      <li>\n        From the <span className=\"instruction\">Intents</span> section of your\n        workspace,{' '}\n        <strong>\n          click on the <span className=\"instruction\">Import intents</span> icon\n        </strong>{' '}\n        next to the button to add intents.\n      </li>\n      <li>\n        <strong>\n          Select <span className=\"instruction\">Choose a file</span>\n        </strong>{' '}\n        from the window that appears, and find the CSV file you just downloaded\n        in the first step.\n      </li>\n      <li>\n        <strong>\n          Click on the <span className=\"instruction\">Import</span> button\n        </strong>\n        . A report of what was imported will be shown as seen in the picture\n        below. Click on <span className=\"instruction\">Done</span> to close the\n        window.\n      </li>\n    </ol>\n    <p>\n      You now have successfully imported two new intents and their examples to\n      train Watson.\n    </p>\n    <p style={{ textAlign: 'center' }}>\n      <img\n        src={successfulImport}\n        alt=\"A successful import of intents from CSV files\"\n        title=\"A successful import of intents from CSV files\"\n        width=\"900\"\n      />\n    </p>\n    <p>\n      Take a moment to <strong>review the intents that were imported</strong>{' '}\n      and the examples for each of them.\n    </p>\n    <p>\n      Next, take them for a spin in the{' '}\n      <span className=\"instruction\">Try it out</span> panel.{' '}\n      <strong>Ask questions like you naturally would</strong> to enquire about\n      store hours or address information. Does it recognize the intents we\n      imported well enough? Train Watson further by adding your own examples\n      directly from the Try it panel when it fails to intepret them correctly.\n    </p>\n    <p>\n      At this point our chatbot understands basic chitchat and it detects when a\n      question is about hours of operation vs when it's about location.\n    </p>\n    <Alert color=\"success\">\n      Having completed this lab, you're well on your way to becoming a buddying\n      chatbot builder. Intents really are the most fundamental part of a\n      chatbot. If you add the right intents to your chatbot, everything else\n      will just fall into place easily. In the next lab, we'll qualify the user\n      input further by taking a look at entities.\n    </Alert>\n\n    <p style={{ textAlign: 'center', margin: '20px' }}>\n      <Link className=\"btn btn-secondary\" to=\"/lab-1\">\n        Back to Lab 1\n      </Link>{' '}\n      <Link className=\"btn btn-primary\" to=\"/lab-3\">\n        Proceed to Lab 3\n      </Link>\n    </p>\n  </Layout>\n)\n\nexport default Lab2\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","// Adapted from th0th's suggestion to workaround Gatsby's bug\n// around active links that require a manual click first:\n// https://github.com/gatsbyjs/gatsby/issues/3238#issuecomment-413314187\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link as GatsbyLink,\n} from 'gatsby';\n\nexport default function NavigationLink(props) {\n  const {\n    exact,\n    className,\n    activeClassName,\n    children,\n  } = props;\n\n  return (\n    <GatsbyLink\n      {...props}\n      getProps={({ isCurrent, isPartiallyCurrent }) => ({\n         className: [\n          'nav-link',\n          className,\n          (exact && isCurrent) ? activeClassName : '',\n          (!exact && isPartiallyCurrent) ? activeClassName : '',\n        ].join(' ').trim(),\n      })}\n    >\n      {children}\n    </GatsbyLink>\n  );\n}\n\nNavigationLink.propTypes = {\n  exact: PropTypes.bool,\n  className: PropTypes.string,\n  activeClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nNavigationLink.defaultProps = {\n  exact: false,\n  activeClassName: 'current',\n  className: '',\n};","import React from 'react'\nimport { Nav, NavItem } from 'reactstrap'\n\nimport NavigationLink from './navigation-link'\n\nconst Navigation = () => (\n  <div\n    style={{\n      background: '#E5CCFF',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n      }}\n    >\n      <Nav pills>\n        <NavItem>\n          <NavigationLink to=\"/\" exact={true}>\n            Home\n          </NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-1\">Lab 1</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-2\">Lab 2</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-3\">Lab 3</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-4\">Lab 4</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-5\">Lab 5</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-6\">Lab 6</NavigationLink>\n        </NavItem>\n      </Nav>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'A collection of hands-on labs to build chatbots with IBM Watson Assistant.' },\n            { name: 'keywords', content: 'chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Navigation />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/try-it-out-panel-51b4736e01a040f7063c34e695af2626.png\";","module.exports = __webpack_public_path__ + \"static/successful-import-intents-58f2bf43a53bb4742be6821dc7332db2.png\";"],"sourceRoot":""}