{"version":3,"sources":["webpack:///./src/pages/lab-4.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/navigation-link.js","webpack:///./src/components/navigation.js","webpack:///./src/components/layout.js","webpack:///./src/images/chitchat-nodes.png"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","reactstrap__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_images_chitchat_nodes_png__WEBPACK_IMPORTED_MODULE_4__","_images_chitchat_nodes_png__WEBPACK_IMPORTED_MODULE_4___default","Lab4","a","createElement","className","style","textAlign","src","chitchat","alt","title","width","href","target","rel","color","margin","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","react_default","background","maxWidth","padding","gatsby_browser_entry","textDecoration","NavigationLink","exact","activeClassName","getProps","isCurrent","isPartiallyCurrent","join","trim","bool","node","defaultProps","Navigation","marginBottom","reactstrap_es","pills","Layout","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header","navigation","paddingTop","_755544856","p"],"mappings":"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","file":"component---src-pages-lab-4-js-bd2bad4736555fc7b5c9.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { Alert, UncontrolledTooltip } from 'reactstrap'\n\nimport Layout from '../components/layout'\n\nimport chitchat from '../images/chitchat-nodes.png'\n\nconst Lab4 = () => (\n  <Layout>\n    <h2>Lab 4: Dialog Flow</h2>\n    <p>\n      With intents and entities under our belts, we can finally look at the\n      third component: the dialog.\n    </p>\n    <p>\n      In fact, at this point, our chatbot can understand some intents and detect\n      a few specific pieces of information thanks to entities. What we are\n      missing is using this information to formulate appropriate responses to\n      the user. Will do so in this lab to create a simple, but useful chatbot.\n    </p>\n\n    <h3>What you will accomplish</h3>\n    <p>In this lab you will:</p>\n    <ol>\n      <li>\n        Create a useful chatbot that leverages the intents and entities we\n        created so far;\n      </li>\n      <li>Better understand how the dialog flow and responses work.</li>\n      <li>\n        Test our chatbot in the <span className=\"instruction\">Try it out</span>{' '}\n        panel.\n      </li>\n      <li>Take your third graded quiz.</li>\n    </ol>\n\n    <h3>Task 1: Create a Dialog and improve the prompt</h3>\n    <p>\n      Let's kick things off by creating a dialog and a good prompt for our\n      chatbot.\n    </p>\n    <ol>\n      <li>\n        <strong>\n          Click on the <span className=\"instruction\">Dialog</span> section\n        </strong>{' '}\n        of your workspace.\n      </li>\n      <li>\n        It's empty at the moment. Go ahead and{' '}\n        <strong>\n          click the <span className=\"instruction\">Create</span> button\n        </strong>\n        .\n      </li>\n      <li>\n        Take a moment to{' '}\n        <strong>\n          investigate the default <span className=\"instruction\">Welcome</span>{' '}\n          and <span className=\"instruction\">Anything else</span> nodes\n        </strong>{' '}\n        that were generated.\n      </li>\n      <li>\n        <strong>\n          Open the <span className=\"instruction\">Try it out</span>{' '}\n        </strong>{' '}\n        panel and click on the <span className=\"instruction\">Clear</span> link\n        at the top to start testing the chatbot from scratch. Notice anything\n        different this time around?\n      </li>\n      <li>\n        Yes, we have a prompt! Unfortunately, the default phrasing is not very\n        user friendly. Let's change it. Select the{' '}\n        <span className=\"instruction\">Welcome</span> node and edit the response\n        to say{' '}\n        <code>\n          Hello. My name is Florence and I'm a chatbot. How can I help you? You\n          can ask me about our store hours and locations.\n        </code>{' '}\n        Change the name from Florence, to whatever flower-inspired name you\n        prefer, to make it yours.\n      </li>\n      <li>\n        <p>\n          Click the <span className=\"instruction\">Clear</span> link in the{' '}\n          <span className=\"instruction\">Try it out</span> panel once again to\n          see the change take effect.\n        </p>\n        <p>\n          Great. We added a bit of antropomorphization, set the expectations\n          right by coming clean about our robot nature, and offered some\n          guidance to the user, in terms of the scope offered by our chatbot.\n        </p>\n      </li>\n      <li>\n        Now try replying <code>hello</code> in the{' '}\n        <span className=\"instruction\">Try it out</span> panel. What happens?\n        Watson recognized the right intent but doesn't have a node to handle\n        greetings, so the fallback node{' '}\n        <span className=\"instruction\">Anything else</span> was executed. We'll\n        remedy to this in the next task.\n      </li>\n    </ol>\n\n    <h3>Task 2: Add nodes for chitchat</h3>\n    <p>\n      We have three chitchat intents, <code>#greetings</code>,{' '}\n      <code>#thank_you</code>, and <code>#goodbyes</code>. We now need to have\n      nodes that specify what reponse we want to give the user, when such\n      intents are detected.\n    </p>\n    <p>\n      We have a couple of strategies possible here. We could create three nodes,\n      one for each of these intents. This is the most common and simple\n      approach. The other option would be to create a single node for chitchat\n      that uses multiple responses (essentially, conditional responses),\n      attaching a condition to each response.\n    </p>\n    <p>\n      I would recommend that you stick to the traditional way as it's more\n      flexible. It allows us to add more chitchat nodes down the line, as well\n      as making the chitchat logic more complex if needed.\n    </p>\n    <p>\n      We want to keep things organized, separating small talk from\n      domain-specific nodes. So we'll create a folder for chitchat, and we'll\n      create three nodes in it for now. The picture below shows the end result.\n    </p>\n    <p style={{ textAlign: 'center' }}>\n      <img\n        src={chitchat}\n        alt=\"Our chitchat nodes\"\n        title=\"Our chitchat nodes\"\n        width=\"700\"\n      />\n    </p>\n    <p>Follow these steps to add it to your chatbot:</p>\n    <ol>\n      <li>\n        Select the <span className=\"instruction\">Welcome</span> node and then{' '}\n        <strong>\n          click the <span className=\"instruction\">Add folder</span> button\n        </strong>\n        . This will create a folder underneat the selected node (i.e.,{' '}\n        <span className=\"instruction\">Welcome</span>\n        ).\n      </li>\n      <li>\n        <strong>\n          Name the folder <code>Chitchat</code>\n        </strong>\n        . You don't need to specify a condition for the folder, as the\n        conditions of the children nodes will suffice.\n      </li>\n      <li>\n        With the <span className=\"instruction\">Chitchat</span> folder selected,{' '}\n        <strong>\n          click the <span className=\"instruction\">Add child node</span> button\n        </strong>\n        . This will create an empty child node within the folder.\n      </li>\n      <li>\n        <strong>\n          Name this node <code>Greetings</code>\n        </strong>\n        . We want it to be executed when the <code>#greetings</code> intent is\n        detected, so under{' '}\n        <span className=\"instruction\">If bot recognizes:</span>{' '}\n        <strong>\n          enter the\n          <code>#greetings</code> intent\n        </strong>\n        . Autocomplete will help you find the intent (not that useful here, but\n        quite handy in complex chatbots with many intents.)\n      </li>\n      <li>\n        <p>\n          <strong>Enter a few appropriate responses</strong>. The scenario we\n          are handling here is one in which we already greeted the user with our\n          prompt, and they replied with a greeting. So we should greet them back\n          without repeating the prompt verbatim.\n        </p>\n\n        <p>\n          <strong>Enter a few responses to offer some variation</strong> if we\n          get a greeting-happy user. Examples, could be{' '}\n          <code>Hi there. How can I help you?</code>,{' '}\n          <code>Hello. How may I assist you today?</code>,{' '}\n          <code>Hi. What can I help you with?</code>.\n        </p>\n\n        <p>\n          Normally, I would advise against open-ended questions such as how can\n          I help you, but since we already qualified the scope of the chatbot in\n          our prompt, we can get away with it here.\n        </p>\n      </li>\n      <li>\n        You can leave the response variations set to{' '}\n        <span className=\"instruction\">sequential</span> or set them to{' '}\n        <span className=\"instruction\">random</span> if you prefer. The third\n        option, <span className=\"instruction\">multiline</span> is not applicable\n        here, as it would provide a response over multiple lines using each\n        response you wrote as its own line, de facto asking the user what is\n        essentially, the same question three times at once. 😄\n      </li>\n      <li>\n        After this reponse to the user, we expect them to enter some more\n        questions, so you can also{' '}\n        <strong>\n          leave <span className=\"instruction\">Wait for user input</span>\n        </strong>{' '}\n        as the final action when executing this node, in the{' '}\n        <span className=\"instruction\">And finally</span> section at the bottom\n        of the node.\n      </li>\n      <li>\n        Open the <span className=\"instruction\">Try it out</span> panel (if you\n        closed it) and click the <span className=\"instruction\">Clear</span> link\n        to start a new conversation.{' '}\n        <strong>\n          Try to reply <code>hi</code> to the chatbot prompt\n        </strong>\n        . Congratulations, you just had your first conversation with our\n        chatbot. It's not a complex interaction, but it's a start.\n      </li>\n      <li>\n        You can close the panel as well as the{' '}\n        <span className=\"instruction\">Greetings</span> node (by pressing on the\n        big X next to <span className=\"instruction\">Customize</span> link within\n        the node).\n      </li>\n      <li>\n        <p>\n          With the <span className=\"instruction\">Greetings</span> node selected,{' '}\n          <strong>\n            click on the <span className=\"instruction\">Add node</span> button\n          </strong>\n          . This will create an empty peer node below{' '}\n          <span className=\"instruction\">Greetings</span>.\n        </p>\n        <p>\n          The order of these chitchat nodes is not that important because they\n          are all simple nodes with independent intents. However, order can\n          matter in more complex scenarios (as we'll see in a moment) and it\n          makes sense to place them in a logical manner that is roughly\n          equivalent to how a conversation would go. Greetings first, thank yous\n          in the middle, and goodbyes at the end.\n        </p>\n        <p>\n          Go ahead and make this node{' '}\n          <strong>\n            handle the <code>#thank_you</code> intent\n          </strong>\n          . For the responses, you'll likely want something like{' '}\n          <code>\n            You're welcome. Please let me know if you need anything else.\n          </code>\n          , <code>My pleasure.</code>,{' '}\n          <code>\n            No problem. Let me know if there is anything else I can help with.\n          </code>{' '}\n          You could get chicky, and say, <code>I aim to please. 😊</code>{' '}\n          depending on how much personality you'd like to inject in your\n          chatbot. BTW, yes, emojis are supported.\n        </p>\n      </li>\n      <li>\n        <strong>\n          Repeat the process for the <code>Goodbyes</code> node\n        </strong>{' '}\n        which will handle the <code>#goodbyes</code> intent. You can use\n        standard polite goodbye responses (like{' '}\n        <code>Nice talking to you today.</code>,<code>Have a nice day.</code>,{' '}\n        <code>Goodbye.</code>\n        etc.)\n      </li>\n      <li>\n        Start a new conversation in the{' '}\n        <span className=\"instruction\">Try it out</span> panel and{' '}\n        <strong>test all three intents</strong> to ensure you get an appropriate\n        response in each case.\n      </li>\n    </ol>\n\n    <h3>Task 3: Add domain specific nodes</h3>\n    <h3>Task 4: Take the Module 3 Quiz</h3>\n    <p>\n      TODO: Explain the setup for the quiz, as it differs from this chatbot.\n    </p>\n    <p>\n      Head over to the{' '}\n      <a\n        href=\"https://courses.cognitiveclass.ai/courses/course-v1:CognitiveClass+CB0103EN+v1/courseware/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Build Your Own Chatbot\n      </a>{' '}\n      course and{' '}\n      <strong>\n        find the <span className=\"instruction\">Graded Review Questions</span>{' '}\n        inside Module 2. Take the quiz\n      </strong>\n      , just like you did in the previous module. As a reminder, there are no\n      trick questions, so go with the answer that appears to make most sense to\n      you.\n    </p>\n    <Alert color=\"success\">\n      Now that you know how to work with intents and entities, we can move on to\n      the third component that make up chatbots. Namely, the dialog.\n    </Alert>\n    <p style={{ textAlign: 'center', margin: '20px' }}>\n      <Link className=\"btn btn-secondary\" to=\"/lab-3\">\n        Back to Lab 3\n      </Link>{' '}\n      <Link className=\"btn btn-primary\" to=\"/lab-5\">\n        Proceed to Lab 5\n      </Link>\n    </p>\n  </Layout>\n)\n\nexport default Lab4\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: 'rebeccapurple',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","// Adapted from th0th's suggestion to workaround Gatsby's bug\n// around active links that require a manual click first:\n// https://github.com/gatsbyjs/gatsby/issues/3238#issuecomment-413314187\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Link as GatsbyLink,\n} from 'gatsby';\n\nexport default function NavigationLink(props) {\n  const {\n    exact,\n    className,\n    activeClassName,\n    children,\n  } = props;\n\n  return (\n    <GatsbyLink\n      {...props}\n      getProps={({ isCurrent, isPartiallyCurrent }) => ({\n         className: [\n          'nav-link',\n          className,\n          (exact && isCurrent) ? activeClassName : '',\n          (!exact && isPartiallyCurrent) ? activeClassName : '',\n        ].join(' ').trim(),\n      })}\n    >\n      {children}\n    </GatsbyLink>\n  );\n}\n\nNavigationLink.propTypes = {\n  exact: PropTypes.bool,\n  className: PropTypes.string,\n  activeClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nNavigationLink.defaultProps = {\n  exact: false,\n  activeClassName: 'current',\n  className: '',\n};","import React from 'react'\nimport { Nav, NavItem } from 'reactstrap'\n\nimport NavigationLink from './navigation-link'\n\nconst Navigation = () => (\n  <div\n    style={{\n      background: '#E5CCFF',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n      }}\n    >\n      <Nav pills>\n        <NavItem>\n          <NavigationLink to=\"/\" exact={true}>\n            Home\n          </NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-1\">Lab 1: Set Up</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-2\">Lab 2: Intents</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-3\">Lab 3: Entities</NavigationLink>\n        </NavItem>\n        <NavItem>\n          <NavigationLink to=\"/lab-4\">Lab 4: Dialog</NavigationLink>\n        </NavItem>\n      </Nav>\n    </div>\n  </div>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'A collection of hands-on labs to build chatbots with IBM Watson Assistant.' },\n            { name: 'keywords', content: 'chatbot, chatbots, watson, watson assistant, ibm, workshop, chatbot workshop' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Navigation />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/chitchat-nodes-423587877cf895b31b90558a85a14c0c.png\";"],"sourceRoot":""}